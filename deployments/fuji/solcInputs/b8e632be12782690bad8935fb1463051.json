{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/Lending/Lending.sol": {
      "content": "// SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.9;\n\nerror outOfReserve();\nerror outOfCollateral();\n\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\nerror lending_addressNotAllowed();\nerror lending_reserveNotAvailable();\nerror lending_notEnoughTimePassed();\n\n// The contract functions can be called only from owner contract(onlyOwner)\ncontract Lending {\n    // Token address\n    IERC20 public token;\n\n    // Owner contract\n    address public ownerContract;\n\n    // Total amount of lended tokens\n    uint256 public amoutLended;\n\n    // Available amount of lended tokens for borrowing\n    uint256 public reserve;\n\n    // Modifier for owner\n    modifier onlyOwner() {\n        if (msg.sender != ownerContract) {\n            revert lending_addressNotAllowed();\n        }\n        _;\n    }\n\n    constructor(address _token) {\n        token = IERC20(_token);\n        ownerContract = msg.sender;\n    }\n\n    // Borrow function\n    function borrow(uint256 amount) public onlyOwner {\n        if (reserve - amount < 0) {\n            revert outOfReserve();\n        }\n        token.transfer(msg.sender, amount);\n        // userBorrowed[msg.sender] +=  amount;\n    }\n\n    // First approve\n    function lend(uint256 amount) public onlyOwner {\n        token.transferFrom(msg.sender, address(this), amount);\n        reserve += amount;\n    }\n\n    // Borrow\n    function withdraw(uint256 amount) public onlyOwner {\n        if (reserve - amount < 0) {\n            revert lending_reserveNotAvailable();\n        }\n        token.transfer(msg.sender, amount);\n        reserve -= amount;\n    }\n\n    // Earn yield\n    uint256 public borrowingAPY;\n\n    function setBorrowingAPY(uint256 newAPY) public onlyOwner {\n        borrowingAPY = newAPY;\n    }\n\n    uint256 public yield;\n    uint256 public farmedYield;\n\n    mapping(address => uint256) public lastYieldFarmedTime;\n    mapping(address => uint256) public yieldTaken;\n\n    function isTime(address user) public view returns (bool) {\n        lastYieldFarmedTime[user];\n        uint256 currentStamp = block.timestamp;\n        if ((lastYieldFarmedTime[user] + 1 days) < currentStamp) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function getYield(address user, uint256 tokenAmount) public returns (uint256) {\n        if (isTime(user) == false) {\n            revert lending_notEnoughTimePassed();\n        }\n        lastYieldFarmedTime[user] = block.timestamp; // Reentrancy guard\n        uint256 yieldSoFar = yieldTaken[user];\n        uint256 userLiquidity = (tokenAmount * 100) / amoutLended;\n        uint256 availableYield = ((yield - ((yieldSoFar * 100) / userLiquidity)) * userLiquidity) /\n            100;\n\n        if (availableYield > yield - farmedYield) {\n            revert lending_notEnoughTimePassed(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\n        }\n        yieldTaken[msg.sender] += availableYield;\n        farmedYield += availableYield;\n        return availableYield;\n\n        // EMIT EVENT\n        // emit yieldFarmed(msg.sender, availableYield);\n    }\n}\n"
    },
    "contracts/Lending/LendingTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./Lending.sol\";\n\n// Error handling\nerror lendingTracker_addressNotAllowed();\nerror lendingTracker_poolNotAvailable();\nerror lendingTracker_amountTooHigh();\nerror lendingTracker_receiptDoesntExist();\n\n// The backend is constantly checking for each user if they are getting liquidated, since the blockchain is unable to do it\ncontract LendingTracker {\n    event userBorrowed(address user, address tokenAddress, uint256 tokenAmount);\n    event userLended(address user, address tokenAddress, uint256 tokenAmount);\n    event userWithdrawnLendedTokens(\n        address user,\n        address tokenAddress,\n        uint256 tokenAmount\n    );\n    event userStakedCollateral(\n        address user,\n        address tokenAddress,\n        uint256 tokenAmount\n    );\n    event userUnstakedCollateral(\n        address user,\n        address tokenAddress,\n        uint256 tokenAmount\n    );\n    event userReturnedBorrowedToken(\n        address user,\n        address tokenAddress,\n        uint256 receiptId,\n        uint256 tokenAmount,\n        uint256 interest\n    );\n    event userFarmedYield(\n        address user,\n        address tokenAddress,\n        uint256 tokenAmount\n    );\n    event collateralTerminated(address user);\n\n    // Max Loan to Value, loan must always be under this percentage of staked collateral\n    int256 ltv = 75;\n\n    // Owner address\n    address owner;\n\n    // Constructor to set the owner\n    constructor() {\n        owner = msg.sender;\n    }\n\n    // Token pool and chainlink price feed\n    struct tokenPool {\n        Lending poolAddress; // ERC-20 Token address\n        address priceAddress; //Chainlink price feed\n    }\n\n    // Borrow receipt\n    struct borrowReceipt {\n        address tokenAddress;\n        uint256 amount;\n        uint256 time;\n        uint256 apy;\n    }\n\n    // Mappings of lended, borrowed and collateralized tokens\n    mapping(address => tokenPool) public tokenToPool; // To find pool for specific ERC20 address\n\n    mapping(address => mapping(address => uint256)) public userLendedAmount; // Lended amout of specific token for user\n    mapping(address => address[]) public userLendedTokens; // All lended token addresses of user\n\n    mapping(address => mapping(address => uint256)) public collateral; // Collateral amount of specific token for user\n    mapping(address => address[]) public collateralTokens; // All collateralized token addresses of user\n\n    mapping(address => address[]) public borrowedTokens; // All borrowed token addresses of user\n    mapping(address => uint256) public borrowingId; // Current user number of ids\n    mapping(address => mapping(address => uint256[])) public userBorrowReceipts; // All receipt ids for a certain token address of user\n    mapping(address => mapping(uint256 => borrowReceipt)) public borrowReceipts; // Id to receipt\n\n    // Adds new pool to lend and borrow from, deployes a new Lending.sol smart contract and tracks it\n    function addTokenPool(address tokenAddress, address priceAddress) public {\n        if (msg.sender != owner) {\n            revert lendingTracker_addressNotAllowed();\n        }\n        Lending newPool = new Lending(tokenAddress);\n        tokenToPool[tokenAddress] = tokenPool(newPool, priceAddress);\n    }\n\n    // Change price feed(if we get new price provider)\n    function changePriceFeed(\n        address tokenAddress,\n        address priceAddress\n    ) public {\n        // Checks if address is allowed to call this\n        if (msg.sender != owner) {\n            revert lendingTracker_addressNotAllowed();\n        }\n        // Checks if the pool exists\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\n            revert lendingTracker_poolNotAvailable();\n        }\n        tokenToPool[tokenAddress].priceAddress = priceAddress;\n    }\n\n    // Change borrowing APY\n    function changeBorrowingAPY(address tokenAddress, uint256 newAPY) public {\n        if (msg.sender != owner) {\n            revert lendingTracker_addressNotAllowed();\n        }\n        tokenToPool[tokenAddress].poolAddress.setBorrowingAPY(newAPY);\n    }\n\n    // Borrows the token\n    function borrowToken(address tokenAddress, uint256 tokenAmount) public {\n        // Checks if the pool exists\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\n            revert lendingTracker_poolNotAvailable();\n        }\n        // Liquidity treshold, if ltv is too high\n        if (liquidityTreshold(msg.sender, tokenAddress, tokenAmount) >= ltv) {\n            revert lendingTracker_amountTooHigh();\n        }\n        // Borrows from the pool contract\n        tokenToPool[tokenAddress].poolAddress.borrow(tokenAmount); // Checks if there is enough reserve\n\n        // Maps the token address if needed\n        if (newTokenChecker(borrowedTokens[msg.sender], tokenAddress) == true) {\n            borrowedTokens[msg.sender].push(tokenAddress);\n        }\n        // Adds funds to a mapping\n        userBorrowReceipts[msg.sender][tokenAddress].push(\n            borrowingId[msg.sender]\n        );\n        borrowReceipts[msg.sender][borrowingId[msg.sender]] = borrowReceipt(\n            tokenAddress,\n            tokenAmount,\n            block.timestamp,\n            tokenToPool[tokenAddress].poolAddress.borrowingAPY()\n        );\n\n        // Transfers tokens to user\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\n        // User receipt Id\n        borrowingId[msg.sender] += 1;\n\n        // Event\n        emit userBorrowed(msg.sender, tokenAddress, tokenAmount);\n    }\n\n    // Lends the token\n    function lendToken(address tokenAddress, uint256 tokenAmount) public {\n        // Checks if pool exists\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\n            revert lendingTracker_poolNotAvailable();\n        }\n        // Transfer and approve tokens\n        IERC20(tokenAddress).transferFrom(\n            msg.sender,\n            address(this),\n            tokenAmount\n        );\n        IERC20(tokenAddress).approve(\n            address(tokenToPool[tokenAddress].poolAddress),\n            tokenAmount\n        );\n        // Maps the token address if needed\n        if (\n            newTokenChecker(userLendedTokens[msg.sender], tokenAddress) == true\n        ) {\n            userLendedTokens[msg.sender].push(tokenAddress);\n        }\n        // Add funds to mapping\n        userLendedAmount[msg.sender][tokenAddress] += tokenAmount;\n        tokenToPool[tokenAddress].poolAddress.lend(tokenAmount);\n\n        // Event\n        emit userLended(msg.sender, tokenAddress, tokenAmount);\n    }\n\n    // Withdraws a lended amount, finished\n    function withdrawLendedToken(\n        address tokenAddress,\n        uint256 tokenAmount\n    ) public {\n        // Checks if pool exists\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\n            revert lendingTracker_poolNotAvailable();\n        }\n        // Checks if there is enough tokens in the pool\n        if (userLendedAmount[msg.sender][tokenAddress] < tokenAmount) {\n            revert lendingTracker_amountTooHigh();\n        }\n        userLendedAmount[msg.sender][tokenAddress] -= tokenAmount;\n        tokenToPool[tokenAddress].poolAddress.withdraw(tokenAmount);\n        // Transfer tokens to user\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\n\n        // Event\n        emit userWithdrawnLendedTokens(msg.sender, tokenAddress, tokenAmount);\n    }\n\n    // Stakes the collateral\n    function stakeCollateral(address tokenAddress, uint256 tokenAmount) public {\n        // Checks if pool exists\n        if (address(tokenToPool[tokenAddress].poolAddress) == address(0)) {\n            revert lendingTracker_poolNotAvailable();\n        }\n        // Transfers tokens from user to the contract\n        IERC20(tokenAddress).transferFrom(\n            msg.sender,\n            address(this),\n            tokenAmount\n        );\n        // Maps the token address if needed\n        if (\n            newTokenChecker(collateralTokens[msg.sender], tokenAddress) == true\n        ) {\n            collateralTokens[msg.sender].push(tokenAddress);\n        }\n        // Adds the amount to mapping\n        collateral[msg.sender][tokenAddress] += tokenAmount;\n\n        //Event\n        emit userStakedCollateral(msg.sender, tokenAddress, tokenAmount);\n    }\n\n    // Unstake collateral, need to borrow 0 to unstake(can calculate how much they can take based on ltv)\n    function unstakeCollateral(\n        address tokenAddress,\n        uint256 tokenAmount\n    ) public {\n        // Checks if amount is too high and if the user is borrowing any tokens\n        if (\n            collateral[msg.sender][tokenAddress] - tokenAmount < 0 &&\n            borrowedTokens[msg.sender].length > 0\n        ) {\n            revert lendingTracker_addressNotAllowed();\n        }\n        // Decreases amount in mapping\n        collateral[msg.sender][tokenAddress] -= tokenAmount;\n        // Transfers the tokens to user\n        IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\n        // Maps the token address if needed\n        if (collateral[msg.sender][tokenAddress] == 0) {\n            for (uint256 i; i < collateralTokens[msg.sender].length; i++) {\n                if (collateralTokens[msg.sender][i] == tokenAddress) {\n                    delete collateralTokens[msg.sender][i];\n                }\n            }\n        }\n\n        //Event\n        emit userUnstakedCollateral(msg.sender, tokenAddress, tokenAmount);\n    }\n\n    // Sepolia testnet btc/usd price feed 0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43, wbtc sepolia 0xE544cAd11e108775399358Bd0790bb72c9e3AD9E\n\n    // Liquidity Treshold view, gets the percentage of ltv currently by the user\n    // Finished, somehow we need to keep track of all the user addresses so the backend can check treshold for each user\n    function liquidityTreshold(\n        address user,\n        address additionalTokenAddress,\n        uint256 tokenAmount\n    ) public view returns (int) {\n        // It checks the price in USD if collaterall falls below borrowed amount in usd + the apy till date, the collateral get terminated\n        int collateralUSD;\n        int borrowedUSD;\n        // If we want to calculate ltv with additional funds\n        if (\n            tokenAmount != 0 &&\n            tokenToPool[additionalTokenAddress].priceAddress != address(0)\n        ) {\n            int conversion = usdConverter(\n                tokenToPool[additionalTokenAddress].priceAddress\n            );\n            collateralUSD += conversion * int(tokenAmount);\n        }\n        for (uint256 i; i < collateralTokens[user].length; i++) {\n            address tokenAddress = collateralTokens[user][i];\n            uint256 amountOfToken = collateral[user][tokenAddress];\n            // Get conversion to USD\n            int conversion = usdConverter(\n                tokenToPool[tokenAddress].priceAddress\n            );\n            collateralUSD += conversion * int(amountOfToken);\n        }\n        for (uint256 i; i < borrowedTokens[user].length; i++) {\n            address tokenAddress = borrowedTokens[user][i];\n            uint256[] storage receiptIds = userBorrowReceipts[user][\n                tokenAddress\n            ];\n            for (uint256 a; a < receiptIds.length; a++) {\n                uint256 receiptTIME = borrowReceipts[msg.sender][receiptIds[a]]\n                    .time;\n                uint256 receiptAMOUNT = borrowReceipts[msg.sender][\n                    receiptIds[a]\n                ].amount;\n                address receiptAddress = borrowReceipts[msg.sender][\n                    receiptIds[a]\n                ].tokenAddress;\n                uint256 receiptAPY = borrowReceipts[msg.sender][receiptIds[a]]\n                    .apy;\n                uint256 borrowInterest = (receiptAMOUNT *\n                    receiptTIME *\n                    receiptAPY) / (365 days * 100);\n                int conversion = usdConverter(\n                    tokenToPool[receiptAddress].priceAddress\n                );\n                borrowedUSD += conversion * int(borrowInterest + receiptAMOUNT);\n            }\n        }\n        return (borrowedUSD * 100) / collateralUSD;\n    }\n\n    // Terminate Collateral\n    // We can make some kind of point system outside of smart contract that tracks addresses that terminate and rewards them\n    function terminateCollateral(address userAddress) public {\n        // Check if the ltv is too high, if it is not reverts\n        if (liquidityTreshold(userAddress, address(0), 0) <= ltv) {\n            revert lendingTracker_addressNotAllowed();\n        }\n        // terminate user collateral and share it between the lenders\n        for (uint256 i; i < collateralTokens[userAddress].length; i++) {\n            collateral[msg.sender][collateralTokens[userAddress][i]] = 0;\n            delete collateralTokens[msg.sender][i];\n        }\n        // Add swap on uniswap router or swap between pools\n\n        // Event\n        emit collateralTerminated(userAddress);\n    }\n\n    // Price converter to USD, uses chainlink price aggregator\n    function usdConverter(address priceAddress) public view returns (int) {\n        (, int answer, , , ) = AggregatorV3Interface(priceAddress)\n            .latestRoundData();\n        return answer;\n    }\n\n    // Token Checker\n    // Checks if the token address is in the address array that we put as arguments\n    function newTokenChecker(\n        address[] memory userTokens,\n        address token\n    ) public pure returns (bool) {\n        bool newToken = true;\n        for (uint256 i; i < userTokens.length; i++) {\n            if (token == userTokens[i]) {\n                newToken = false;\n            }\n        }\n        return newToken;\n    }\n\n    function getYield(address tokenAddress) public {\n        uint256 yield = tokenToPool[tokenAddress].poolAddress.getYield(\n            msg.sender,\n            userLendedAmount[msg.sender][tokenAddress]\n        );\n        IERC20(tokenAddress).transfer(msg.sender, yield);\n\n        // Event\n        emit userFarmedYield(msg.sender, tokenAddress, yield);\n    }\n\n    function returnBorrowedToken(uint256 id, uint256 tokenAmount) public {\n        if (borrowReceipts[msg.sender][id].amount == 0) {\n            revert lendingTracker_receiptDoesntExist();\n        }\n        if (borrowReceipts[msg.sender][id].amount - tokenAmount < 0) {\n            revert lendingTracker_amountTooHigh();\n        }\n        uint256 receiptAPY = borrowReceipts[msg.sender][id].apy;\n        uint256 receiptTIME = borrowReceipts[msg.sender][id].time;\n        address tokenAddress = borrowReceipts[msg.sender][id].tokenAddress;\n\n        uint256 borrowInterest = (tokenAmount * receiptTIME * receiptAPY) /\n            (365 days * 100);\n\n        IERC20(tokenAddress).transferFrom(\n            msg.sender,\n            address(this),\n            tokenAmount + borrowInterest\n        );\n        borrowReceipts[msg.sender][id].amount -= tokenAmount;\n\n        // Event\n        emit userReturnedBorrowedToken(\n            msg.sender,\n            tokenAddress,\n            id,\n            tokenAmount,\n            borrowInterest\n        );\n    }\n}\n\n// Need to do:\n// Swap of tokens after termination of collateral(or what to do if not swapping)\n// If yield number gets too high(uint256), we open up a new pool with same stats\n// If we make new pool with same token and price address we need to restore lended amount for each person(refreshPool())\n"
    },
    "contracts/LiquidityPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\nerror assetNotCorrect();\nerror notEnoughTokens();\nerror notEnoughGas();\nerror notEnoughTimePassed();\nerror initialLiquidityAlreadyProvided();\nerror addressNotCorrect();\nerror amountTooBig();\nerror needToCallExistingFunction();\n\n/**\n * @title LiquidityPool\n * @dev A decentralized liquidity pool contract for swapping assets and providing liquidity.\n */\ncontract LiquidityPool {\n    // Events\n    event priceChanged(address _asset, uint256 price);\n    event liquidityAdded(\n        address indexed _address,\n        uint256 _assetOneAmount,\n        uint256 _assetTwoAmount\n    );\n    event liquidityRemoved(\n        address indexed _address,\n        uint256 _assetOneAmount,\n        uint256 _assetTwoAmount\n    );\n    event yieldFarmed(address indexed _address, uint256 _amount);\n\n    // Token Addresses\n    address public assetOneAddress;\n    address public assetTwoAddress;\n\n    // Liquidity and Yield (fees)\n    uint256 public initialLiquidity;\n    uint256 public liquidity;\n    uint256 public yield;\n    uint256 public swapFee;\n    address public owner;\n\n    // Reentrancy Guard\n    bool internal locked;\n\n    /**\n     * @dev Modifier to prevent reentrancy attacks.\n     */\n    modifier noReentrancy() {\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    /**\n     * @dev Modifier to restrict functions only to the owner.\n     */\n    modifier onlyOwner() {\n        msg.sender == owner;\n        _;\n    }\n\n    /**\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\n     * @param _assetOneAddress The address of the first asset.\n     * @param _assetTwoAddress The address of the second asset.\n     */\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\n        assetOneAddress = _assetOneAddress;\n        assetTwoAddress = _assetTwoAddress;\n        owner = msg.sender;\n        swapFee = 1000000000000000; // 0.001 ether\n    }\n\n    /**\n     * @dev Function to change the swap fee. Only callable by the owner.\n     * @param newSwapFee The new swap fee to set.\n     */\n    function changeSwapFee(uint256 newSwapFee) public onlyOwner {\n        swapFee = newSwapFee;\n    }\n\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\n    mapping(address => uint256) public lpTokenQuantity;\n\n    /**\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\n     * @dev Needs the ERC-20 approval for transferFrom.\n     * @param _assetOneAmount The amount of the first asset to add.\n     * @param _assetTwoAmount The amount of the second asset to add.\n     */\n    function addInitialLiquidity(\n        uint256 _assetOneAmount,\n        uint256 _assetTwoAmount\n    ) public onlyOwner {\n        if (initialLiquidityProvidedTime[owner] > 0) {\n            revert initialLiquidityAlreadyProvided();\n        }\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\n\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\n        IERC20(assetOneAddress).transferFrom(\n            msg.sender,\n            address(this),\n            _assetOneAmount\n        );\n        IERC20(assetTwoAddress).transferFrom(\n            msg.sender,\n            address(this),\n            _assetTwoAmount\n        );\n\n        // SET THE INITIAL LIQUIDITY\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\n        liquidity = initialLiquidity;\n\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\n        lpTokenQuantity[msg.sender] = initialLiquidity;\n\n        // EMIT EVENT\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\n    }\n\n    /**\n     * @dev Function to add additional liquidity to the pool.\n     * @dev Needs the ERC-20 approval for transferFrom.\n     * @param _asset The address of the first asset.\n     * @param _secondAsset The address of the second asset.\n     * @param _amount The amount of the first asset to add.\n     */\n    function addLiquidity(\n        address _asset,\n        address _secondAsset,\n        uint256 _amount\n    ) public noReentrancy {\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\n        IERC20(_secondAsset).transferFrom(\n            msg.sender,\n            address(this),\n            amountOfOppositeTokenNeeded(_asset, _amount)\n        );\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\n\n        // give lp tokens to new liquidity provider\n        lpTokenQuantity[msg.sender] += (_amount *\n            amountOfOppositeTokenNeeded(_asset, _amount));\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\n\n        // EMIT EVENT\n        emit liquidityAdded(\n            msg.sender,\n            amountOfOppositeTokenNeeded(_asset, _amount),\n            _amount\n        );\n    }\n\n    /**\n     * @dev Function to remove liquidity from the pool.\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\n     */\n    function removeLiquidity(uint256 _amount) public noReentrancy {\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) /\n            100; // How much out of their liquidity they want to withdraw in percentage\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) /\n            1 ether;\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) /\n            1 ether;\n        // condition for owner, because of the initial liquidity timer\n        if (\n            (msg.sender == owner) &&\n            (isTimeInitialLiquidity() == false) &&\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) <\n                initialLiquidity)\n        ) {\n            revert notEnoughTokens();\n        }\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\n        if (\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\n        ) {\n            revert notEnoughTokens();\n        }\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\n\n        // EMIT EVENT\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\n    }\n\n    /**\n     * @dev Function to sell the first asset and receive the second asset.\n     * @param _amount The amount of the first asset to sell.\n     */\n    function sellAssetOne(uint256 _amount) public payable noReentrancy {\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\n        if (_amount >= getAssetOne()) {\n            payable(msg.sender).transfer(msg.value);\n            revert amountTooBig();\n        }\n        //PAY THE ETH FEE\n        if (msg.value < swapFee) {\n            revert notEnoughGas();\n        }\n        yield += swapFee;\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\n        //CALCULATION\n        uint256 n = getAssetTwo();\n        uint256 assetOne = getAssetOne() + _amount;\n        uint256 assetTwo = liquidity / assetOne;\n        uint256 result = n - assetTwo;\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\n        IERC20(assetOneAddress).transferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\n        payable(msg.sender).transfer(unrequiredFee); // Sending back the unrequired fee\n        //EVENTS\n        emit priceChanged(assetOneAddress, assetOnePrice());\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\n    }\n\n    /**\n     * @dev Function to sell the second asset and receive the first asset.\n     * @param _amount The amount of the second asset to sell.\n     */\n    function sellAssetTwo(uint256 _amount) public payable noReentrancy {\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\n        if (_amount >= getAssetTwo()) {\n            payable(msg.sender).transfer(msg.value); // Transfer value back\n            revert amountTooBig();\n        }\n        //PAY THE ETH FEE\n        if (msg.value < swapFee) {\n            revert notEnoughGas();\n        }\n        yield += swapFee;\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\n        //CALCULATION\n        uint256 n = getAssetOne();\n        uint256 assetTwo = getAssetTwo() + _amount;\n        uint256 assetOne = liquidity / assetTwo;\n        uint256 result = n - assetOne;\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\n        IERC20(assetTwoAddress).transferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n        IERC20(assetOneAddress).transfer(msg.sender, result);\n        payable(msg.sender).transfer(unrequiredFee); // Sending back the unrequired fee\n        //EVENTS\n        emit priceChanged(assetOneAddress, assetOnePrice());\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\n    }\n\n    /**\n     * @dev Function to get the current balance of a given asset held by the contract.\n     * @param _address The address of the asset.\n     * @return The current balance of the asset.\n     */\n    function getAssetBalace(address _address) public view returns (uint256) {\n        return IERC20(_address).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Function to get the current price of the first asset in terms of the second asset.\n     * @return The current price of the first asset * 10**18.\n     */\n    function assetOnePrice() public view returns (uint256) {\n        return (getAssetTwo() * 1 ether) / getAssetOne();\n    }\n\n    /**\n     * @dev Function to get the current price of the second asset in terms of the first asset.\n     * @return The current price of the second asset * 10**18.\n     */\n    function assetTwoPrice() public view returns (uint256) {\n        return (getAssetOne() * 1 ether) / getAssetTwo();\n    }\n\n    /**\n     * @dev Function to get the amount of the first asset held by the contract.\n     * @return The current balance of the first asset.\n     */\n    function getAssetOne() public view returns (uint256) {\n        return IERC20(assetOneAddress).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Function to get the amount of the second asset held by the contract.\n     * @return The current balance of the second asset.\n     */\n    function getAssetTwo() public view returns (uint256) {\n        return IERC20(assetTwoAddress).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\n     * @param _address The address of the LP token holder.\n     * @return The quantity of LP tokens owned by the address.\n     */\n    function getLpTokenQuantity(\n        address _address\n    ) public view returns (uint256) {\n        if (msg.sender != owner && _address == msg.sender) {\n            revert addressNotCorrect();\n        }\n        return lpTokenQuantity[_address];\n    }\n\n    /**\n     * @dev Function to get the total liquidity in the pool.\n     * @return The total liquidity in the pool.\n     */\n    function getLiquidity() public view returns (uint256) {\n        return liquidity;\n    }\n\n    /**\n     * @dev Function to get the current swap fee percentage.\n     * @return The current swap fee percentage.\n     */\n    function getSwapFee() public view returns (uint256) {\n        return swapFee;\n    }\n\n    /**\n     * @dev Function to get the current ETH balance of the contract.\n     * @return The current ETH balance of the contract.\n     */\n    function addressBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /**\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\n     * @param sellingAsset The address of the asset being sold.\n     * @param _amount The amount of the first asset being sold.\n     * @return The quantity of the second asset that would be returned\n     */\n    function getSwapQuantity(\n        address sellingAsset,\n        uint256 _amount\n    ) public view returns (uint256) {\n        if (sellingAsset == assetOneAddress) {\n            uint256 newAssetOne = getAssetOne() + _amount;\n            uint256 newAssetTwo = liquidity / newAssetOne;\n            return getAssetTwo() - newAssetTwo;\n        } else if (sellingAsset == assetTwoAddress) {\n            uint256 newAssetTwo = getAssetTwo() + _amount;\n            uint256 newAssetOne = liquidity / newAssetTwo;\n            return getAssetOne() - newAssetOne;\n        } else {\n            revert assetNotCorrect();\n        }\n    }\n\n    /**\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\n     * @param _asset The address of the asset.\n     * @param _amount The amount of the asset.\n     * @return The quantity of the second asset needed for providing liquidity.\n     */\n    function amountOfOppositeTokenNeeded(\n        address _asset,\n        uint256 _amount\n    ) public view returns (uint256) {\n        uint256 ratio;\n        if (_asset == assetOneAddress) {\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\n        } else {\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\n        }\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\n        return amountNeeded;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Yield Farming and Time Locks\n\n    // Daily yield tracking\n    mapping(address => uint256) public yieldTaken;\n\n    /**\n     * @dev Function to get the current yield amount available in the pool.\n     * @return The current yield amount.\n     */\n    function yieldAmount() public view returns (uint256) {\n        return yield;\n    }\n\n    /**\n     * @dev Function to allow users to claim their yield. Can be called once a day.\n     */\n    function getYield() public {\n        if (isTime() == false) {\n            revert notEnoughTimePassed();\n        }\n        lastYieldFarmedTime[msg.sender] = block.timestamp; // Reentrancy guard\n        uint256 yieldSoFar = yieldTaken[msg.sender];\n        uint256 userLiquidity = (lpTokenQuantity[msg.sender] * 100) / liquidity;\n        uint256 availableYield = ((yield -\n            ((yieldSoFar * 100) / userLiquidity)) * userLiquidity) / 100;\n        if (availableYield > address(this).balance) {\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\n        }\n        yieldTaken[msg.sender] += availableYield;\n        payable(msg.sender).transfer(availableYield);\n\n        // EMIT EVENT\n        emit yieldFarmed(msg.sender, availableYield);\n    }\n\n    // Timestamp mapping for yield farming\n    mapping(address => uint256) public lastYieldFarmedTime;\n    mapping(address => uint256) public initialLiquidityProvidedTime;\n\n    /**\n     * @dev Function to check if enough time has passed for the user to claim yield.\n     * @return Whether enough time has passed or not.\n     */\n    function isTime() public view returns (bool) {\n        lastYieldFarmedTime[msg.sender];\n        uint256 currentStamp = block.timestamp;\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\n     * @return Whether enough time has passed or not.\n     */\n    function isTimeInitialLiquidity() public view returns (bool) {\n        if (\n            block.timestamp >\n            (initialLiquidityProvidedTime[msg.sender] + 365 days)\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\n     */\n    fallback() external payable {\n        revert needToCallExistingFunction();\n    }\n\n    /**\n     * @dev Receive function if address calls unexisting function, without msg.data\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\n     */\n    receive() external payable {\n        revert needToCallExistingFunction();\n    }\n}\n"
    },
    "contracts/PoolTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./LiquidityPool.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// Errors\nerror PoolTracker_noTokensDetected();\nerror PoolTracker_pairAlreadyExists();\nerror PoolTracker_addressNotAllowed();\n\n// To do:\n// Timer: if the owner doesnt deploy initial liquidity in one day the\n// liquidity pool gets untracked, is not part of platform anymore\ncontract PoolTracker {\n    // PoolTracker Owner\n    address owner;\n\n    // Constructor, sets the owner\n    constructor() {\n        owner = msg.sender;\n    }\n\n    // Reentrancy Guard\n    bool internal locked;\n\n    /**\n     * @dev Modifier to prevent reentrancy attacks.\n     */\n    modifier noReentrancy() {\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    // Tracker for created pools, will add to database\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\n\n    // Mapping of pool Pairs, to store existing ones\n    mapping(address => address[]) public poolPairs;\n\n    // Mapping a pool to the contracts, in case we wont store it in the database\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\n\n    // All the available tokens\n    address[] public tokens;\n\n    // Mapping of pool per Owner\n    mapping(address => LiquidityPool[]) public poolOwner;\n\n    // Pool creator, approve enough for two transferfroms(one to contract(by msg sender) and one from contract(by contract))\n    function createPool(\n        address _assetOneAddress,\n        address _assetTwoAddress,\n        uint256 amountOne,\n        uint256 amountTwo\n    ) external noReentrancy {\n        if (\n            exists(_assetOneAddress, _assetTwoAddress)\n        ) // To prevent duplicate pools\n        {\n            revert PoolTracker_pairAlreadyExists();\n        }\n        // Transfer of tokens\n        IERC20(_assetOneAddress).transferFrom(\n            msg.sender,\n            address(this),\n            amountOne\n        );\n        IERC20(_assetTwoAddress).transferFrom(\n            msg.sender,\n            address(this),\n            amountTwo\n        );\n        // Creation of pool\n        LiquidityPool poolAddress = new LiquidityPool(\n            _assetOneAddress,\n            _assetTwoAddress\n        );\n        // Approve\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\n        // Add initial liquidity\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\n        // Update mappings\n        poolOwner[msg.sender].push(poolAddress);\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\n\n        // tokens.push()\n        if (tokenExists(_assetOneAddress) == false) {\n            tokens.push(_assetOneAddress);\n        }\n        if (tokenExists(_assetTwoAddress) == false) {\n            tokens.push(_assetTwoAddress);\n        }\n        // Emit the event\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\n    }\n\n    // To check if a pool pair exists\n    function exists(address token1, address token2) public view returns (bool) {\n        bool exist;\n        for (uint256 i; i < poolPairs[token1].length; i++) {\n            if (poolPairs[token1][i] == token2) {\n                exist = true;\n            }\n        }\n        return exist;\n    }\n\n    function tokenExists(address tokenAddress) public view returns (bool) {\n        bool exist;\n        for (uint256 i; i < tokens.length; i++) {\n            if (tokenAddress == tokens[i]) {\n                exist = true;\n                break;\n            }\n        }\n        return exist;\n    }\n\n    // Routing token\n    struct routingAddress {\n        address tokenAddress;\n        address priceFeed;\n    }\n\n    // Array of routing Tokens\n    routingAddress[] public routingAddresses;\n\n    //\n    function addRoutingAddress(address tokenAddress, address priceFeed) public {\n        if (msg.sender != owner) {\n            revert PoolTracker_addressNotAllowed();\n        }\n        if (routingAddresses.length == 0) {\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\n        } else {\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\n                    routingAddresses[i] = routingAddress(\n                        tokenAddress,\n                        priceFeed\n                    ); // In case we want to update priceFeed address of existing token\n                    break;\n                } else if (i == routingAddresses.length - 1) {\n                    // If it is the last one and isnt the same\n                    routingAddresses.push(\n                        routingAddress(tokenAddress, priceFeed)\n                    );\n                }\n            }\n        }\n    }\n\n    function tokenToRoute(\n        address address1,\n        address address2\n    ) public view returns (address) {\n        address[] memory token1pairs = poolPairs[address1];\n        address[] memory token2pairs = poolPairs[address2];\n\n        address routingToken;\n        int routingTokenLiquidity;\n\n        for (uint256 i; i < token1pairs.length; i++) {\n            for (uint256 a; a < token2pairs.length; a++) {\n                if (token1pairs[i] == token2pairs[a]) {\n                    for (uint256 b; b < routingAddresses.length; b++) {\n                        if (\n                            routingAddresses[b].tokenAddress == token1pairs[i]\n                        ) {\n                            (, int answer, , , ) = AggregatorV3Interface(\n                                routingAddresses[b].priceFeed\n                            ).latestRoundData();\n                            int liquidity;\n                            LiquidityPool pool1 = pairToPool[address1][\n                                routingAddresses[b].tokenAddress\n                            ];\n                            LiquidityPool pool2 = pairToPool[address2][\n                                routingAddresses[b].tokenAddress\n                            ];\n                            uint256 balance1 = IERC20(\n                                routingAddresses[b].tokenAddress\n                            ).balanceOf(address(pool1));\n                            uint256 balance2 = IERC20(\n                                routingAddresses[b].tokenAddress\n                            ).balanceOf(address(pool2));\n                            liquidity =\n                                (int(balance1) + int(balance2)) *\n                                answer;\n                            if (liquidity > routingTokenLiquidity) {\n                                // Best choice so far if the liquidty is bigger than previous best token\n                                routingToken = routingAddresses[b].tokenAddress;\n                                routingTokenLiquidity = liquidity;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return routingToken;\n    }\n}\n"
    },
    "contracts/WeaveSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nimport \"./PoolTracker.sol\";\nimport \"./LiquidityPool.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\nerror SwapRouter_tokensCantBeSwapped();\n\ncontract SwapRouter {\n\n    event swap(\n        address userAddress,\n        address address1,\n        address address2,\n        uint256 address1Amount,\n        uint256 address2Amount\n    );\n\n    // Pool tracker address\n    PoolTracker poolTracker;\n\n    constructor(address tracker) {\n        poolTracker = PoolTracker(tracker);\n    }\n\n    // Reentrancy Guard\n    bool internal locked;\n\n    /**\n     * @dev Modifier to prevent reentrancy attacks.\n     */\n    modifier noReentrancy() {\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    // address1 input, address2 output\n    // approve amount\n    function swapAsset(address address1, address address2, uint256 inputAmount) public noReentrancy {\n        if (poolTracker.exists(address1, address2)) {\n            // FUNCTION TO SWAP THE TOKENS if there is a direct pool\n            // FIND THE POOL\n            // PERFORM A SWAP\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\n            uint256 startingBalanceAddress2 = IERC20(address2).balanceOf(address(this));\n            if (pool.assetOneAddress() == address1) {\n                IERC20(address1).transferFrom(msg.sender, address(this), inputAmount);\n                IERC20(address1).approve(address(pool), inputAmount);\n                pool.sellAssetOne(inputAmount);\n            } else {\n                IERC20(address1).transferFrom(msg.sender, address(this), inputAmount);\n                IERC20(address1).approve(address(pool), inputAmount);\n                pool.sellAssetTwo(inputAmount);\n            }\n            uint256 amountOutput = IERC20(address2).balanceOf(address(this)) -\n                startingBalanceAddress2;\n            IERC20(address2).transfer(msg.sender, amountOutput);\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\n            // ROUTING THROUGH ANOTHER TOKEN if there is no direct pool\n            // CHECK WHICH TOKEN TO ROUTE\n            // GET THE POOLS OF ROUTED TOKEN AND ADDRESSES\n            // CALCULATE THE AMOUNT OF OUTPUT AND PERFORM THE SWAPS\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\n            LiquidityPool pool1 = poolTracker.pairToPool(address1, routingToken);\n            LiquidityPool pool2 = poolTracker.pairToPool(address2, routingToken);\n            uint256 startingBalance = IERC20(routingToken).balanceOf(address(this));\n            uint256 startingBalance2 = IERC20(address2).balanceOf(address(this));\n            //SWAP 1, input token into routing  token\n            if (pool1.assetOneAddress() == address1) {\n                IERC20(address1).transferFrom(msg.sender, address(this), inputAmount);\n                IERC20(address1).approve(address(pool1), inputAmount);\n                pool1.sellAssetOne(inputAmount);\n            } else {\n                IERC20(address1).transferFrom(msg.sender, address(this), inputAmount);\n                IERC20(address1).approve(address(pool1), inputAmount);\n                pool1.sellAssetTwo(inputAmount);\n            }\n            //SWAP 2, routing token into output token\n            uint256 routingTokenInput = IERC20(routingToken).balanceOf(address(this)) -\n                startingBalance;\n            if (pool2.assetOneAddress() == address1) {\n                IERC20(routingToken).approve(address(pool2), routingTokenInput);\n                pool2.sellAssetOne(routingTokenInput);\n            } else {\n                IERC20(routingToken).approve(address(pool2), routingTokenInput);\n                pool2.sellAssetTwo(routingTokenInput);\n            }\n            uint256 address2Output = IERC20(address2).balanceOf(address(this)) - startingBalance2;\n            IERC20(address2).transfer(msg.sender, address2Output);\n        } else {\n            // Assets cant be swapped directly nor routed\n            revert SwapRouter_tokensCantBeSwapped();\n        }\n    }\n\n    // Address1 selling asset\n    // Address2 buying asset\n    // inputAmount amount of address1 we want to output\n    function getSwapAmount(\n        address address1,\n        address address2,\n        uint256 inputAmount\n    ) public view returns (uint256) {\n        uint256 output;\n        if (poolTracker.exists(address1, address2)) {\n            // Get pool\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\n            // Get asset two\n            output = pool.getSwapQuantity(address1, inputAmount);\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\n            LiquidityPool pool1 = poolTracker.pairToPool(address1, routingToken);\n            LiquidityPool pool2 = poolTracker.pairToPool(address2, routingToken);\n            uint256 routingOutput = pool1.getSwapQuantity(address1, inputAmount);\n            output = pool2.getSwapQuantity(routingToken, routingOutput);\n        } else {\n            // Assets cant be swapped directly nor routed\n            revert SwapRouter_tokensCantBeSwapped();\n        }\n        return output;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}