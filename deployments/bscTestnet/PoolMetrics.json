{
  "address": "0x53CD8F14FD463c89853D706b9556ea80889e6F1d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolTracker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "dailyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "dailyRoi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "marketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "pairMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "pairTvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "pairTvlRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolTracker",
      "outputs": [
        {
          "internalType": "contract PoolTracker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract SwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress2",
          "type": "address"
        }
      ],
      "name": "totalRoi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "tvlRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "usdValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb56eab8044df87503c45bfe9e0969badd9881692c66a0d15e7cf1b2ca5066e1d",
  "receipt": {
    "to": null,
    "from": "0x540467feca43907A701311D0721df481D1f9e238",
    "contractAddress": "0x53CD8F14FD463c89853D706b9556ea80889e6F1d",
    "transactionIndex": 9,
    "gasUsed": "1868895",
    "logsBloom": "0x
    "blockHash": "0x186a1ce1892123ee2b775237bc0ce3785f710084e0b249bc9293760b67e69d72",
    "transactionHash": "0xb56eab8044df87503c45bfe9e0969badd9881692c66a0d15e7cf1b2ca5066e1d",
    "logs": [],
    "blockNumber": 38365693,
    "cumulativeGasUsed": "2535971",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x603D1517726A1b3A4BFA097eaBdB8A2d9F633Cf1",
    "0x143db3CEEfbdfe5631aDD3E50f7614B6ba708BA7",
    "0x4B31F790563Ca71FE10cA47D358e818F710ded62"
  ],
  "numDeployments": 11,
  "solcInputHash": "f0a7192d4cafea1c59406f0a93a82552",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"dailyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"dailyRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"marketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"pairMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"pairTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"pairTvlRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTracker\",\"outputs\":[{\"internalType\":\"contract PoolTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract SwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress2\",\"type\":\"address\"}],\"name\":\"totalRoi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tvlRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"usdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Smart contract for computing various on chain metrics related to liquidity pools and tokens.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor function initializes the PoolTracker and ETH price feed addresses.\",\"params\":{\"_ethPriceFeed\":\"Address of the ETH price feed contract.\",\"_poolTracker\":\"Address of the PoolTracker contract.\"}},\"dailyRate(address,address)\":{\"details\":\"Computes the daily yield rate for a liquidity pool with two tokens.\",\"params\":{\"tokenAddress\":\"Address of the first token.\",\"tokenAddress2\":\"Address of the second token.\"},\"returns\":{\"_0\":\"The daily yield rate of the liquidity pool.\"}},\"dailyRoi(address,address)\":{\"details\":\"Computes the daily ROI for a liquidity pool with two tokens.\",\"params\":{\"tokenAddress\":\"Address of the first token.\",\"tokenAddress2\":\"Address of the second token.\"},\"returns\":{\"_0\":\"The daily ROI of the liquidity pool.\"}},\"marketCap(address)\":{\"details\":\"Computes the market capitalization of a token.\",\"params\":{\"tokenAddress\":\"Address of the token.\"},\"returns\":{\"_0\":\"The market capitalization of the token.\"}},\"pairMarketCap(address,address)\":{\"details\":\"Computes the combined market capitalization of two tokens.\",\"params\":{\"tokenAddress\":\"Address of the first token.\",\"tokenAddress2\":\"Address of the second token.\"},\"returns\":{\"_0\":\"The combined market capitalization of the two tokens.\"}},\"pairTvl(address,address)\":{\"details\":\"Computes the combined TVL of two tokens in a liquidity pool.\",\"params\":{\"tokenAddress\":\"Address of the first token.\",\"tokenAddress2\":\"Address of the second token.\"},\"returns\":{\"_0\":\"The combined TVL of the two tokens.\"}},\"pairTvlRatio(address,address)\":{\"details\":\"Computes the TVL ratio of a pool, which is pair TVL divided by pair market capitalization.\",\"params\":{\"tokenAddress\":\"Address of the token.\"},\"returns\":{\"_0\":\"The TVL ratio of the token.\"}},\"totalRoi(address,address)\":{\"details\":\"Computes the total return on investment (ROI) for a liquidity pool with two tokens.\",\"params\":{\"tokenAddress\":\"Address of the first token.\",\"tokenAddress2\":\"Address of the second token.\"},\"returns\":{\"_0\":\"The total ROI of the liquidity pool.\"}},\"tvl(address)\":{\"details\":\"Computes the total value locked (TVL) in a liquidity pool for a given token.\",\"params\":{\"tokenAddress\":\"Address of the token.\"},\"returns\":{\"_0\":\"The TVL of the token.\"}},\"tvlRatio(address)\":{\"details\":\"Computes the TVL ratio of a token, which is TVL divided by market capitalization.\",\"params\":{\"tokenAddress\":\"Address of the token.\"},\"returns\":{\"_0\":\"The TVL ratio of the token.\"}},\"usdValue(address,uint256)\":{\"details\":\"Computes the USD value of a token based on its amount and price feed.\",\"params\":{\"tokenAddress\":\"Address of the token.\",\"tokenAmount\":\"Amount of the token.\"},\"returns\":{\"_0\":\"The USD value of the token.\"}}},\"title\":\"PoolMetrics\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex/PoolMetrics.sol\":\"PoolMetrics\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Bridge/InterfaceBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IZKBridge {\\n    // @notice send a zkBridge message to the specified address at a zkBridge endpoint.\\n    // @param dstChainId - the destination chain identifier\\n    // @param dstAddress - the address on destination chain\\n    // @param payload - a custom bytes payload to send to the destination contract\\n    function send(\\n        uint16 dstChainId,\\n        address dstAddress,\\n        bytes memory payload\\n    ) external payable returns (uint64 nonce);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param dstChainId - the destination chain identifier\\n    function estimateFee(uint16 dstChainId) external view returns (uint256 fee);\\n}\\n\\ninterface IZKBridgeReceiver {\\n    // @notice zkBridge endpoint will invoke this function to deliver the message on the destination\\n    // @param srcChainId - the source endpoint identifier\\n    // @param srcAddress - the source sending contract address from the source chain\\n    // @param nonce - the ordered message nonce\\n    // @param payload - a custom bytes payload from send chain\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x57b2588179cffda143a904e7f55db5eebc526fa479fd3004ea2f521a7fa438a3\",\"license\":\"MIT\"},\"contracts/Dex/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../Bridge/InterfaceBridge.sol\\\";\\nimport \\\"./PoolTracker.sol\\\";\\n\\n// Custom errors for more descriptive and gas-efficient failure handling.\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @notice Manages liquidity provision, asset swapping, and yield generation in a decentralized manner.\\n * @dev Implements IZKBridgeReceiver interface for cross-chain interactions and yield farming computations.\\n */\\ncontract LiquidityPool is IZKBridgeReceiver {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // State variables\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee = 1000000000000000;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetOneAmount\\n        );\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetTwoAmount\\n        );\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) external noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount *\\n            amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(\\n            msg.sender,\\n            amountOfOppositeTokenNeeded(_asset, _amount),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) external noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) /\\n            100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) /\\n            1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) /\\n            1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) <\\n                initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(\\n        uint256 _amount\\n    ) external payable noReentrancy returns (uint256) {\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n        // Returns the amount of token\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(\\n        uint256 _amount\\n    ) external payable noReentrancy returns (uint256) {\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n        //Returns amount of token\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(\\n        address _address\\n    ) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(\\n        address sellingAsset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     *\\n     * @notice sends the request to yield Calculator smart contract to compute yield with lower gas fee\\n     */\\n    function getYield() public payable {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        //NOW SEND BACK THE AVAILABLE YIELD\\n        uint16 destinationChain = PoolTracker(owner).destinationChain();\\n        IZKBridge zkBridge = PoolTracker(owner).zkBridge();\\n        address yieldCalculator = PoolTracker(owner).yieldCalculator();\\n        bytes memory newPayload = abi.encode(msg.sender);\\n        uint256 fee = zkBridge.estimateFee(destinationChain);\\n        zkBridge.send{value: fee}(\\n            destinationChain,\\n            yieldCalculator,\\n            newPayload\\n        );\\n        // Pay this to our contract which will fund the bridge contract with tokens\\n        uint256 bridgeFee = zkBridge.estimateFee(destinationChain);\\n        (bool sent, ) = payable(owner).call{value: bridgeFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the request for lower gas fee computation\\n     *\\n     * @param payload returns the computation\\n     *\\n     */\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external {\\n        (uint256 availableYield, address user) = abi.decode(\\n            payload,\\n            (uint256, address)\\n        );\\n        //TODO handle your business\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[user] += availableYield;\\n        (bool sent, ) = payable(user).call{value: availableYield}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (\\n            block.timestamp >\\n            (initialLiquidityProvidedTime[msg.sender] + 365 days)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0x43885f9fe91645ea9f0c6d31af2c401168931156fd4d52c9757d6fb78fec9315\",\"license\":\"MIT\"},\"contracts/Dex/PoolMetrics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"./PoolTracker.sol\\\";\\nimport \\\"./WeaveSwap.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title PoolMetrics\\n * @dev Smart contract for computing various on chain metrics related to liquidity pools and tokens.\\n */\\ncontract PoolMetrics {\\n    // State variables\\n    PoolTracker public poolTracker;\\n    SwapRouter public swapRouter;\\n    address public ethPriceFeed;\\n\\n    /**\\n     * @dev Constructor function initializes the PoolTracker and ETH price feed addresses.\\n     * @param _poolTracker Address of the PoolTracker contract.\\n     * @param _ethPriceFeed Address of the ETH price feed contract.\\n     */\\n    constructor(\\n        address _poolTracker,\\n        address _ethPriceFeed,\\n        address _swapRouter\\n    ) {\\n        poolTracker = PoolTracker(_poolTracker);\\n        swapRouter = SwapRouter(payable(_swapRouter));\\n        ethPriceFeed = _ethPriceFeed;\\n    }\\n\\n    /**\\n     * @dev Computes the market capitalization of a token.\\n     * @param tokenAddress Address of the token.\\n     * @return The market capitalization of the token.\\n     */\\n    function marketCap(address tokenAddress) public view returns (uint256) {\\n        return usdValue(tokenAddress, IERC20(tokenAddress).totalSupply());\\n    }\\n\\n    /**\\n     * @dev Computes the combined market capitalization of two tokens.\\n     * @param tokenAddress Address of the first token.\\n     * @param tokenAddress2 Address of the second token.\\n     * @return The combined market capitalization of the two tokens.\\n     */\\n    function pairMarketCap(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) public view returns (uint256) {\\n        uint256 tokenAmount = IERC20(tokenAddress).totalSupply();\\n        uint256 tokenAmount2 = IERC20(tokenAddress2).totalSupply();\\n        uint256 totalMarketCap = usdValue(tokenAddress, tokenAmount) +\\n            usdValue(tokenAddress2, tokenAmount2);\\n        return totalMarketCap;\\n    }\\n\\n    /**\\n     * @dev Computes the total value locked (TVL) in a liquidity pool for a given token.\\n     * @param tokenAddress Address of the token.\\n     * @return The TVL of the token.\\n     */\\n    function tvl(address tokenAddress) public view returns (uint256) {\\n        uint256 tokensLocked;\\n        uint256 poolPairLength = poolTracker.getPoolPairsLength(tokenAddress);\\n        for (uint256 i; i < poolPairLength; i++) {\\n            address tokenAddress2 = poolTracker.poolPairs(tokenAddress, i);\\n            LiquidityPool pool = poolTracker.pairToPool(\\n                tokenAddress,\\n                tokenAddress2\\n            );\\n            tokensLocked += IERC20(tokenAddress).balanceOf(address(pool));\\n        }\\n        return usdValue(tokenAddress, tokensLocked);\\n    }\\n\\n    /**\\n     * @dev Computes the combined TVL of two tokens in a liquidity pool.\\n     * @param tokenAddress Address of the first token.\\n     * @param tokenAddress2 Address of the second token.\\n     * @return The combined TVL of the two tokens.\\n     */\\n    function pairTvl(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) public view returns (uint256) {\\n        LiquidityPool pool = poolTracker.pairToPool(\\n            tokenAddress,\\n            tokenAddress2\\n        );\\n        uint256 tokenAmount = IERC20(tokenAddress).balanceOf(address(pool));\\n        uint256 tokenAmount2 = IERC20(tokenAddress2).balanceOf(address(pool));\\n        uint256 totalTvl = usdValue(tokenAddress, tokenAmount) +\\n            usdValue(tokenAddress2, tokenAmount2);\\n        return totalTvl;\\n    }\\n\\n    /**\\n     * @dev Computes the TVL ratio of a token, which is TVL divided by market capitalization.\\n     * @param tokenAddress Address of the token.\\n     * @return The TVL ratio of the token.\\n     */\\n    function tvlRatio(address tokenAddress) public view returns (uint256) {\\n        return (tvl(tokenAddress) * 100) / marketCap(tokenAddress);\\n    }\\n\\n    /**\\n     * @dev Computes the TVL ratio of a pool, which is pair TVL divided by pair market capitalization.\\n     * @param tokenAddress Address of the token.\\n     * @return The TVL ratio of the token.\\n     */\\n    function pairTvlRatio(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) public view returns (uint256) {\\n        return\\n            (pairTvl(tokenAddress, tokenAddress2) * 100) /\\n            pairMarketCap(tokenAddress, tokenAddress2);\\n    }\\n\\n    /**\\n     * @dev Computes the total return on investment (ROI) for a liquidity pool with two tokens.\\n     * @param tokenAddress Address of the first token.\\n     * @param tokenAddress2 Address of the second token.\\n     * @return The total ROI of the liquidity pool.\\n     */\\n    function totalRoi(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) public view returns (uint256) {\\n        LiquidityPool pool = poolTracker.pairToPool(\\n            tokenAddress,\\n            tokenAddress2\\n        );\\n        uint256 profit = pool.yield() * uint256(usdConverter(ethPriceFeed));\\n        uint256 tokenAmount = IERC20(tokenAddress).balanceOf(address(pool));\\n        uint256 tokenAmount2 = IERC20(tokenAddress2).balanceOf(address(pool));\\n        return\\n            ((profit * 100) * 10 ** 26) /\\n            (usdValue(tokenAddress, tokenAmount) +\\n                usdValue(tokenAddress2, tokenAmount2));\\n    }\\n\\n    /**\\n     * @dev Computes the daily ROI for a liquidity pool with two tokens.\\n     * @param tokenAddress Address of the first token.\\n     * @param tokenAddress2 Address of the second token.\\n     * @return The daily ROI of the liquidity pool.\\n     */\\n    function dailyRoi(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) public view returns (uint256) {\\n        return\\n            (uint256(usdConverter(ethPriceFeed)) *\\n                dailyRate(tokenAddress, tokenAddress2) *\\n                1000000000000000000) / pairTvl(tokenAddress, tokenAddress2);\\n    }\\n\\n    /**\\n     * @dev Computes the daily yield rate for a liquidity pool with two tokens.\\n     * @param tokenAddress Address of the first token.\\n     * @param tokenAddress2 Address of the second token.\\n     * @return The daily yield rate of the liquidity pool.\\n     */\\n    function dailyRate(\\n        address tokenAddress,\\n        address tokenAddress2\\n    ) public view returns (uint256) {\\n        LiquidityPool pool = poolTracker.pairToPool(\\n            tokenAddress,\\n            tokenAddress2\\n        );\\n        uint256 yield = pool.yield();\\n        uint256 deployTimeStamp = pool.initialLiquidityProvidedTime(\\n            pool.owner()\\n        );\\n        uint256 daysSinceDeployed = (block.timestamp - deployTimeStamp) /\\n            60 /\\n            24; // seconds / hours / days\\n        return yield / daysSinceDeployed;\\n    }\\n\\n    /**\\n     * @dev Computes the USD value of a token based on its amount and price feed.\\n     * @param tokenAddress Address of the token.\\n     * @param tokenAmount Amount of the token.\\n     * @return The USD value of the token.\\n     */\\n    function usdValue(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) public view returns (uint256) {\\n        // If it is a routing token\\n        for (uint256 i; i < poolTracker.getRoutingAddressesLength(); i++) {\\n            (address routingAddress, address priceFeed) = poolTracker\\n                .routingAddresses(i);\\n            if (routingAddress == tokenAddress) {\\n                return uint256(usdConverter(priceFeed)) * tokenAmount;\\n            }\\n        }\\n        // If there is a direct pool with routing token\\n        for (uint256 i; i < poolTracker.getRoutingAddressesLength(); i++) {\\n            (address routingAddress, address priceFeed) = poolTracker\\n                .routingAddresses(i);\\n            if (\\n                address(poolTracker.pairToPool(tokenAddress, routingAddress)) !=\\n                address(0)\\n            ) {\\n                // Token value\\n                // uint256 tokenValue = swapRouter.getSwapAmount(\\n                //     tokenAddress,\\n                //     routingAddress,\\n                //     tokenAmount\\n                // );\\n                LiquidityPool pool = poolTracker.pairToPool(\\n                    tokenAddress,\\n                    routingAddress\\n                );\\n                uint256 tokenValue;\\n                if (pool.assetOneAddress() == tokenAddress) {\\n                    tokenValue =\\n                        (uint256(usdConverter(priceFeed)) *\\n                            tokenAmount *\\n                            pool.getAssetOne()) /\\n                        pool.getAssetTwo();\\n                } else {\\n                    tokenValue =\\n                        (uint256(usdConverter(priceFeed)) *\\n                            tokenAmount *\\n                            pool.getAssetTwo()) /\\n                        pool.getAssetOne();\\n                }\\n                return tokenValue;\\n            }\\n        }\\n        // If there is no possible USD conversion\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Retrieves the latest TOKEN to USD conversion rate from the price feed.\\n     * @param priceAddress Address of the TOKEN price feed.\\n     * @return The latest TOKEN to USD conversion rate.\\n     */\\n    function usdConverter(address priceAddress) internal view returns (int) {\\n        (, int answer, , , ) = AggregatorV3Interface(priceAddress)\\n            .latestRoundData();\\n        return answer;\\n    }\\n}\",\"keccak256\":\"0xf4f2c30206d891979060028f6c1c90503e898bb05ee0e900d865e41c070bad9e\",\"license\":\"MIT\"},\"contracts/Dex/PoolTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../Bridge/InterfaceBridge.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror PoolTracker_pairAlreadyExists();\\nerror PoolTracker_cantSwapSameToken();\\n\\n/**\\n * @title PoolTracker\\n * @dev Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem.\\n * Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions.\\n * Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\\n */\\ncontract PoolTracker {\\n    // Tracker for created pools, will add to database\\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\\n\\n    // The owner of the PoolTracker contract, set to the deployer.\\n    address private owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // Hardcoded destination chain identifier and ZK Bridge address\\n    uint16 public destinationChain = 23;\\n    IZKBridge public zkBridge =\\n        IZKBridge(0xb20F0105f3598652a3bE569132F7b3F341106dDC);\\n\\n    // Address of the yield calculator contract, for bridging computational parts.\\n    address public yieldCalculator;\\n\\n    // Constructor: Sets the contract deployer as the owner.\\n    constructor(address _yieldCalculator) {\\n        owner = msg.sender;\\n        yieldCalculator = _yieldCalculator;\\n    }\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert();\\n        }\\n        _;\\n    }\\n\\n    // Mapping of pool Pairs, to store existing ones\\n    mapping(address => address[]) public poolPairs;\\n\\n    // Mapping a pool to the contracts, in case we wont store it in the database\\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\\n\\n    // All the available tokens\\n    address[] public tokens;\\n\\n    // All pools\\n    address[] public pools;\\n\\n    /**\\n     * @dev Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial\\n     * transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings.\\n     * Emits a PoolCreated event upon successful creation.\\n     *\\n     * Requirements:\\n     * - The token pair must not already have an existing pool.\\n     * - The caller must have approved the contract to spend the necessary token amounts.\\n     *\\n     * @param _assetOneAddress The address of the first token in the pair.\\n     * @param _assetTwoAddress The address of the second token in the pair.\\n     * @param amountOne The amount of the first token to add to the pool.\\n     * @param amountTwo The amount of the second token to add to the pool.\\n     */\\n    function createPool(\\n        address _assetOneAddress,\\n        address _assetTwoAddress,\\n        uint256 amountOne,\\n        uint256 amountTwo\\n    ) external noReentrancy {\\n        if (\\n            exists(_assetOneAddress, _assetTwoAddress)\\n        ) // To prevent duplicate pools\\n        {\\n            revert PoolTracker_pairAlreadyExists();\\n        }\\n        // Transfer of tokens\\n        IERC20(_assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOne\\n        );\\n        IERC20(_assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountTwo\\n        );\\n        // Creation of pool\\n        LiquidityPool poolAddress = new LiquidityPool(\\n            _assetOneAddress,\\n            _assetTwoAddress\\n        );\\n        pools.push(address(poolAddress));\\n        // Approve\\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\\n        // Add initial liquidity\\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\\n        // Update mappings\\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\\n\\n        if (tokenExists(_assetOneAddress) == false) {\\n            tokens.push(_assetOneAddress);\\n        }\\n        if (tokenExists(_assetTwoAddress) == false) {\\n            tokens.push(_assetTwoAddress);\\n        }\\n        // Emit the event\\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\\n    }\\n\\n    /**\\n     * @dev Checks if a liquidity pool exists for a given pair of tokens.\\n     *\\n     * @param token1 The address of the first token.\\n     * @param token2 The address of the second token.\\n     * @return bool Returns true if the pool exists, false otherwise.\\n     */\\n    function exists(address token1, address token2) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < poolPairs[token1].length; i++) {\\n            if (poolPairs[token1][i] == token2) {\\n                exist = true;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    /**\\n     * @dev Checks if a token is already tracked by the contract.\\n     *\\n     * @param tokenAddress The address of the token to check.\\n     * @return bool Returns true if the token is tracked, false otherwise.\\n     */\\n    function tokenExists(address tokenAddress) internal view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokenAddress == tokens[i]) {\\n                exist = true;\\n                break;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    // Routing token\\n    struct routingAddress {\\n        address tokenAddress;\\n        address priceFeed;\\n    }\\n\\n    // Array of routing Tokens\\n    routingAddress[] public routingAddresses;\\n\\n    /**\\n     * @dev Allows the contract owner to add or update the routing address for a token.\\n     * This is used for token swaps and price feed lookups.\\n     *\\n     * @param tokenAddress The token for which to set the routing.\\n     * @param priceFeed The Chainlink price feed address for the token.\\n     */\\n    function addRoutingAddress(\\n        address tokenAddress,\\n        address priceFeed\\n    ) external onlyOwner {\\n        if (routingAddresses.length == 0) {\\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n        } else {\\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\\n                    routingAddresses[i] = routingAddress(\\n                        tokenAddress,\\n                        priceFeed\\n                    );\\n                    break;\\n                } else if (i == routingAddresses.length - 1) {\\n                    routingAddresses.push(\\n                        routingAddress(tokenAddress, priceFeed)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns all array of all tradable tokens on the platform\\n     *\\n     * @return array Returns tokens array.\\n     */\\n    function tokenList() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    /**\\n     * @dev Returns length or routingAddresses array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getRoutingAddressesLength() external view returns (uint256) {\\n        return routingAddresses.length;\\n    }\\n\\n    /**\\n     * @dev Returns length or poolPairs array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getPoolPairsLength(\\n        address tokenAddress\\n    ) external view returns (uint256) {\\n        return poolPairs[tokenAddress].length;\\n    }\\n\\n    function getPoolPairs(\\n        address tokenAddress\\n    ) public view returns (address[] memory) {\\n        return poolPairs[tokenAddress];\\n    }\\n\\n    /**\\n     * @dev Retrieve pool addresses\\n     *\\n     * @return array Returns pools array\\n     */\\n    function getPools() public view returns (address[] memory) {\\n        return pools;\\n    }\\n\\n    /**\\n     * @dev owner can withdraw the fees to deposit to yield Calculator\\n     */\\n    function withdrawEther() external onlyOwner {\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x81d8feb54ae79b742aa0df6c0a8a06fe0c61c06b1a62bc7c264a8fcd77e4d987\",\"license\":\"MIT\"},\"contracts/Dex/WeaveSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing required contracts and interfaces\\nimport \\\"./PoolTracker.sol\\\";\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n// Custom errors for specific failure modes, enhancing gas efficiency and error clarity.\\nerror SwapRouter_tokensCantBeSwapped();\\nerror SwapRouter_needToCallExistingFunction();\\n\\n/**\\n * @title SwapRouter\\n * @dev This contract facilitates token swaps by interacting with liquidity pools.\\n * It supports direct swaps between two tokens in a single pool, or routed swaps through an intermediary token.\\n * Utilizes the PoolTracker contract to find liquidity pools and perform the necessary asset exchanges.\\n */\\ncontract SwapRouter {\\n    // Event emitted after successful token swaps, providing auditability and transparency of operations.\\n    event swap(\\n        address userAddress,\\n        address address1,\\n        address address2,\\n        uint256 address1Amount,\\n        uint256 address2Amount\\n    );\\n\\n    // Reference to the PoolTracker contract for pool operations\\n    PoolTracker poolTracker;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @notice Constructs the SwapRouter and initializes the PoolTracker reference.\\n     * @param tracker The PoolTracker contract address.\\n     */\\n    constructor(address tracker) {\\n        poolTracker = PoolTracker(tracker);\\n    }\\n\\n    /**\\n     * @notice Swaps `inputAmount` of `address1` tokens for `address2` tokens.\\n     * @dev This function supports direct swaps between tokens in a single pool or routed swaps through an intermediary token.\\n     * Uses PoolTracker to determine the best swap path and perform the exchange.\\n     * @param address1 The token being sold by the user.\\n     * @param address2 The token being purchased by the user.\\n     * @param inputAmount The amount of `address1` tokens to swap.\\n     */\\n    function swapAsset(\\n        address address1,\\n        address address2,\\n        uint256 inputAmount\\n    ) public payable noReentrancy {\\n        if (poolTracker.exists(address1, address2)) {\\n            // Direct swap scenario\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            uint256 startingBalanceAddress2 = IERC20(address2).balanceOf(\\n                address(this)\\n            );\\n            if (pool.assetOneAddress() == address1) {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool), inputAmount);\\n                pool.sellAssetOne{value: pool.swapFee()}(inputAmount);\\n            } else {\\n                IERC20(address1).transferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    inputAmount\\n                );\\n                IERC20(address1).approve(address(pool), inputAmount);\\n                pool.sellAssetTwo{value: pool.swapFee()}(inputAmount);\\n            }\\n            uint256 amountOutput = IERC20(address2).balanceOf(address(this)) -\\n                startingBalanceAddress2;\\n            IERC20(address2).transfer(msg.sender, amountOutput);\\n            // Unrequired fee\\n            uint256 unrequiredFee = msg.value - pool.swapFee(); // In case the msg.sender sent more value than it is required\\n            (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        } else if (tokenToRoute(address1, address2) != address(0)) {\\n            // Routed swap scenario\\n            address routingToken = tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            uint256 routingTokenAmount;\\n            //SWAP 1, input token into routing  token\\n            IERC20(address1).transferFrom(\\n                msg.sender,\\n                address(this),\\n                inputAmount\\n            );\\n            IERC20(address1).approve(address(pool1), inputAmount);\\n            if (pool1.assetOneAddress() == address1) {\\n                routingTokenAmount = pool1.sellAssetOne{value: pool1.swapFee()}(\\n                    inputAmount\\n                );\\n            } else {\\n                routingTokenAmount = pool1.sellAssetTwo{value: pool1.swapFee()}(\\n                    inputAmount\\n                );\\n            }\\n            //SWAP 2, routing token into output token\\n            uint256 amountOutput;\\n            IERC20(routingToken).approve(address(pool2), routingTokenAmount);\\n            if (pool2.assetOneAddress() == routingToken) {\\n                amountOutput = pool2.sellAssetOne{value: pool2.swapFee()}(\\n                    routingTokenAmount\\n                );\\n            } else {\\n                amountOutput = pool2.sellAssetTwo{value: pool2.swapFee()}(\\n                    routingTokenAmount\\n                );\\n            }\\n            IERC20(address2).transfer(msg.sender, amountOutput);\\n            // Unrequired fee\\n            uint256 unrequiredFee = msg.value -\\n                pool1.swapFee() -\\n                pool2.swapFee(); // In case the msg.sender sent more value than it is required\\n            (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n    }\\n\\n    /**\\n     * @notice Estimates the output amount for a swap from `address1` to `address2` given an `inputAmount` of `address1`.\\n     * @dev Considers direct swaps and routed swaps through an intermediary token, utilizing PoolTracker for calculations.\\n     * @param address1 The token being sold.\\n     * @param address2 The token being bought.\\n     * @param inputAmount The amount of `address1` tokens to swap.\\n     * @return output The estimated amount of `address2` tokens to be received.\\n     */\\n    function getSwapAmount(\\n        address address1,\\n        address address2,\\n        uint256 inputAmount\\n    ) public view returns (uint256) {\\n        uint256 output;\\n        if (poolTracker.exists(address1, address2)) {\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            output = pool.getSwapQuantity(address1, inputAmount);\\n        } else if (tokenToRoute(address1, address2) != address(0)) {\\n            address routingToken = tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            uint256 routingOutput = pool1.getSwapQuantity(\\n                address1,\\n                inputAmount\\n            );\\n            output = pool2.getSwapQuantity(routingToken, routingOutput);\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n        return output;\\n    }\\n\\n    /**\\n     * @notice Retrieves the swap fee required for a swap between `address1` and `address2`.\\n     * @dev Calculates the total swap fee, accounting for both direct and routed swaps, by querying the associated pools.\\n     * @param address1 The source token address.\\n     * @param address2 The destination token address.\\n     * @return fee The total swap fee for the transaction.\\n     */\\n    function getSwapFee(\\n        address address1,\\n        address address2\\n    ) public view returns (uint256) {\\n        uint256 fee;\\n        if (poolTracker.exists(address1, address2)) {\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            fee += pool.swapFee();\\n        } else if (tokenToRoute(address1, address2) != address(0)) {\\n            address routingToken = tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(\\n                address1,\\n                routingToken\\n            );\\n            LiquidityPool pool2 = poolTracker.pairToPool(\\n                address2,\\n                routingToken\\n            );\\n            fee += pool1.swapFee();\\n            fee += pool2.swapFee();\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n        return fee;\\n    }\\n\\n    /**\\n     * @dev Determines the optimal routing token for a swap between two tokens,\\n     * based on available liquidity and price feeds.\\n     *\\n     * @param address1 The address of the first token.\\n     * @param address2 The address of the second token.\\n     * @return address The address of the optimal routing token.\\n     */\\n    function tokenToRoute(\\n        address address1,\\n        address address2\\n    ) public view returns (address) {\\n        if (address1 == address2) {\\n            revert PoolTracker_cantSwapSameToken();\\n        }\\n        address[] memory token1pairs = poolTracker.getPoolPairs(address1);\\n        address[] memory token2pairs = poolTracker.getPoolPairs(address2);\\n\\n        address routingToken;\\n        int routingTokenLiquidity;\\n\\n        for (uint256 i; i < token1pairs.length; i++) {\\n            for (uint256 a; a < token2pairs.length; a++) {\\n                if (token1pairs[i] == token2pairs[a]) {\\n                    for (\\n                        uint256 b;\\n                        b < poolTracker.getRoutingAddressesLength();\\n                        b++\\n                    ) {\\n                        (address tokenAddress, address priceFeed) = poolTracker\\n                            .routingAddresses(b);\\n                        if (tokenAddress == token1pairs[i]) {\\n                            int liquidity;\\n                            LiquidityPool pool1 = poolTracker.pairToPool(\\n                                address1,\\n                                tokenAddress\\n                            );\\n                            LiquidityPool pool2 = poolTracker.pairToPool(\\n                                address2,\\n                                tokenAddress\\n                            );\\n                            uint256 balance1 = IERC20(tokenAddress).balanceOf(\\n                                address(pool1)\\n                            );\\n                            uint256 balance2 = IERC20(tokenAddress).balanceOf(\\n                                address(pool2)\\n                            );\\n                            liquidity =\\n                                (int(balance1) + int(balance2)) *\\n                                usdConverter(priceFeed);\\n                            if (liquidity > routingTokenLiquidity) {\\n                                // Best choice so far if the liquidity is bigger than previous best token\\n                                routingToken = tokenAddress;\\n                                routingTokenLiquidity = liquidity;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return routingToken;\\n    }\\n\\n    function usdConverter(address priceFeed) internal view returns (int) {\\n        (, int answer, , , ) = AggregatorV3Interface(priceFeed)\\n            .latestRoundData();\\n        return answer;\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     */\\n    fallback() external payable {}\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x48cc717802554e173cab508bc5b421db3a045b5b5317d0b64220984cbfb6d796\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620021583803806200215883398181016040528101906200003791906200016c565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001c8565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001348262000107565b9050919050565b620001468162000127565b81146200015257600080fd5b50565b60008151905062000166816200013b565b92915050565b60008060006060848603121562000188576200018762000102565b5b6000620001988682870162000155565b9350506020620001ab8682870162000155565b9250506040620001be8682870162000155565b9150509250925092565b611f8080620001d86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063af7665ce1161008c578063c31c9c0711610066578063c31c9c0714610260578063c4fb32c31461027e578063e75db616146102ae578063ef610d8d146102de576100cf565b8063af7665ce146101e2578063bca04ec414610200578063c26fa28d14610230576100cf565b80631212033b146100d457806328a724ac146101045780634e5a9729146101225780636d3e08b7146101525780637c56176114610182578063931f63f8146101b2575b600080fd5b6100ee60048036038101906100e99190611909565b61030e565b6040516100fb9190611962565b60405180910390f35b61010c610441565b60405161011991906119dc565b60405180910390f35b61013c60048036038101906101379190611909565b610465565b6040516101499190611962565b60405180910390f35b61016c60048036038101906101679190611909565b61065e565b6040516101799190611962565b60405180910390f35b61019c60048036038101906101979190611909565b6108da565b6040516101a99190611962565b60405180910390f35b6101cc60048036038101906101c79190611909565b61090e565b6040516101d99190611962565b60405180910390f35b6101ea610be6565b6040516101f79190611a06565b60405180910390f35b61021a60048036038101906102159190611a21565b610c0c565b6040516102279190611962565b60405180910390f35b61024a60048036038101906102459190611909565b610c3d565b6040516102579190611962565b60405180910390f35b610268610cad565b6040516102759190611a81565b60405180910390f35b61029860048036038101906102939190611a21565b610cd3565b6040516102a59190611962565b60405180910390f35b6102c860048036038101906102c39190611a21565b610d63565b6040516102d59190611962565b60405180910390f35b6102f860048036038101906102f39190611ac8565b61103e565b6040516103059190611962565b60405180910390f35b6000808373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561035757600080fd5b505afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190611b1d565b905060008373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d957600080fd5b505afa1580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104119190611b1d565b9050600061041f858361103e565b610429878561103e565b6104339190611b79565b905080935050505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b81526004016104c3929190611bcf565b60206040518083038186803b1580156104db57600080fd5b505afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105139190611c48565b905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016105509190611a06565b60206040518083038186803b15801561056857600080fd5b505afa15801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a09190611b1d565b905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016105dd9190611a06565b60206040518083038186803b1580156105f557600080fd5b505afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190611b1d565b9050600061063b868361103e565b610645888561103e565b61064f9190611b79565b90508094505050505092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b81526004016106bc929190611bcf565b60206040518083038186803b1580156106d457600080fd5b505afa1580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611c48565b905060008173ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b15801561075657600080fd5b505afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190611b1d565b905060008273ffffffffffffffffffffffffffffffffffffffff16638477a6348473ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f457600080fd5b505afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190611c8a565b6040518263ffffffff1660e01b81526004016108489190611a06565b60206040518083038186803b15801561086057600080fd5b505afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108989190611b1d565b905060006018603c83426108ac9190611cb7565b6108b69190611d1a565b6108c09190611d1a565b905080836108ce9190611d1a565b94505050505092915050565b60006108e6838361030e565b60646108f28585610465565b6108fc9190611d4b565b6109069190611d1a565b905092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b815260040161096c929190611bcf565b60206040518083038186803b15801561098457600080fd5b505afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc9190611c48565b905060006109eb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611816565b8273ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3157600080fd5b505afa158015610a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a699190611b1d565b610a739190611d4b565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401610ab09190611a06565b60206040518083038186803b158015610ac857600080fd5b505afa158015610adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b009190611b1d565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610b3d9190611a06565b60206040518083038186803b158015610b5557600080fd5b505afa158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d9190611b1d565b9050610b99868261103e565b610ba3888461103e565b610bad9190611b79565b6a52b7d2dcc80cd2e4000000606485610bc69190611d4b565b610bd09190611d4b565b610bda9190611d1a565b94505050505092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c1782610cd3565b6064610c2284610d63565b610c2c9190611d4b565b610c369190611d1a565b9050919050565b6000610c498383610465565b670de0b6b3a7640000610c5c858561065e565b610c87600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611816565b610c919190611d4b565b610c9b9190611d4b565b610ca59190611d1a565b905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610d5c828373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1f57600080fd5b505afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d579190611b1d565b61103e565b9050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5ff5061856040518263ffffffff1660e01b8152600401610dc29190611a06565b60206040518083038186803b158015610dda57600080fd5b505afa158015610dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e129190611b1d565b905060005b8181101561102a5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c75d89d87846040518363ffffffff1660e01b8152600401610e7d929190611da5565b60206040518083038186803b158015610e9557600080fd5b505afa158015610ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecd9190611c8a565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888846040518363ffffffff1660e01b8152600401610f2d929190611bcf565b60206040518083038186803b158015610f4557600080fd5b505afa158015610f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7d9190611c48565b90508673ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401610fb89190611a06565b60206040518083038186803b158015610fd057600080fd5b505afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110089190611b1d565b856110139190611b79565b94505050808061102290611dce565b915050610e17565b50611035848361103e565b92505050919050565b6000805b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663941230606040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a857600080fd5b505afa1580156110bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e09190611b1d565b8110156111fd5760008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930186f2846040518263ffffffff1660e01b81526004016111439190611962565b604080518083038186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190611e17565b915091508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111e857846111d482611816565b6111de9190611d4b565b9350505050611810565b505080806111f590611dce565b915050611042565b5060005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663941230606040518163ffffffff1660e01b815260040160206040518083038186803b15801561126757600080fd5b505afa15801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f9190611b1d565b81101561180a5760008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930186f2846040518263ffffffff1660e01b81526004016113029190611962565b604080518083038186803b15801561131957600080fd5b505afa15801561132d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113519190611e17565b91509150600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b81526004016113c8929190611bcf565b60206040518083038186803b1580156113e057600080fd5b505afa1580156113f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114189190611c48565b73ffffffffffffffffffffffffffffffffffffffff16146117f55760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b8152600401611491929190611bcf565b60206040518083038186803b1580156114a957600080fd5b505afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e19190611c48565b905060008773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b15801561154257600080fd5b505afa158015611556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157a9190611c8a565b73ffffffffffffffffffffffffffffffffffffffff1614156116c1578173ffffffffffffffffffffffffffffffffffffffff1663131a6f016040518163ffffffff1660e01b815260040160206040518083038186803b1580156115dc57600080fd5b505afa1580156115f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116149190611b1d565b8273ffffffffffffffffffffffffffffffffffffffff1663aa03f2ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561165a57600080fd5b505afa15801561166e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116929190611b1d565b8861169c86611816565b6116a69190611d4b565b6116b09190611d4b565b6116ba9190611d1a565b90506117e8565b8173ffffffffffffffffffffffffffffffffffffffff1663aa03f2ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561170757600080fd5b505afa15801561171b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173f9190611b1d565b8273ffffffffffffffffffffffffffffffffffffffff1663131a6f016040518163ffffffff1660e01b815260040160206040518083038186803b15801561178557600080fd5b505afa158015611799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bd9190611b1d565b886117c786611816565b6117d19190611d4b565b6117db9190611d4b565b6117e59190611d1a565b90505b8095505050505050611810565b5050808061180290611dce565b915050611201565b50600090505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561185f57600080fd5b505afa158015611873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118979190611ecf565b50505091505080915050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118d6826118ab565b9050919050565b6118e6816118cb565b81146118f157600080fd5b50565b600081359050611903816118dd565b92915050565b600080604083850312156119205761191f6118a6565b5b600061192e858286016118f4565b925050602061193f858286016118f4565b9150509250929050565b6000819050919050565b61195c81611949565b82525050565b60006020820190506119776000830184611953565b92915050565b6000819050919050565b60006119a261199d611998846118ab565b61197d565b6118ab565b9050919050565b60006119b482611987565b9050919050565b60006119c6826119a9565b9050919050565b6119d6816119bb565b82525050565b60006020820190506119f160008301846119cd565b92915050565b611a00816118cb565b82525050565b6000602082019050611a1b60008301846119f7565b92915050565b600060208284031215611a3757611a366118a6565b5b6000611a45848285016118f4565b91505092915050565b6000611a5982611987565b9050919050565b6000611a6b82611a4e565b9050919050565b611a7b81611a60565b82525050565b6000602082019050611a966000830184611a72565b92915050565b611aa581611949565b8114611ab057600080fd5b50565b600081359050611ac281611a9c565b92915050565b60008060408385031215611adf57611ade6118a6565b5b6000611aed858286016118f4565b9250506020611afe85828601611ab3565b9150509250929050565b600081519050611b1781611a9c565b92915050565b600060208284031215611b3357611b326118a6565b5b6000611b4184828501611b08565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b8482611949565b9150611b8f83611949565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bc457611bc3611b4a565b5b828201905092915050565b6000604082019050611be460008301856119f7565b611bf160208301846119f7565b9392505050565b6000611c03826118ab565b9050919050565b6000611c1582611bf8565b9050919050565b611c2581611c0a565b8114611c3057600080fd5b50565b600081519050611c4281611c1c565b92915050565b600060208284031215611c5e57611c5d6118a6565b5b6000611c6c84828501611c33565b91505092915050565b600081519050611c84816118dd565b92915050565b600060208284031215611ca057611c9f6118a6565b5b6000611cae84828501611c75565b91505092915050565b6000611cc282611949565b9150611ccd83611949565b925082821015611ce057611cdf611b4a565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d2582611949565b9150611d3083611949565b925082611d4057611d3f611ceb565b5b828204905092915050565b6000611d5682611949565b9150611d6183611949565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d9a57611d99611b4a565b5b828202905092915050565b6000604082019050611dba60008301856119f7565b611dc76020830184611953565b9392505050565b6000611dd982611949565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e0c57611e0b611b4a565b5b600182019050919050565b60008060408385031215611e2e57611e2d6118a6565b5b6000611e3c85828601611c75565b9250506020611e4d85828601611c75565b9150509250929050565b600069ffffffffffffffffffff82169050919050565b611e7681611e57565b8114611e8157600080fd5b50565b600081519050611e9381611e6d565b92915050565b6000819050919050565b611eac81611e99565b8114611eb757600080fd5b50565b600081519050611ec981611ea3565b92915050565b600080600080600060a08688031215611eeb57611eea6118a6565b5b6000611ef988828901611e84565b9550506020611f0a88828901611eba565b9450506040611f1b88828901611b08565b9350506060611f2c88828901611b08565b9250506080611f3d88828901611e84565b915050929550929590935056fea26469706673582212200b6b93ec36cea90d580fb3d16a245e1583461714666e95a93ad029a8d9b3593164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063af7665ce1161008c578063c31c9c0711610066578063c31c9c0714610260578063c4fb32c31461027e578063e75db616146102ae578063ef610d8d146102de576100cf565b8063af7665ce146101e2578063bca04ec414610200578063c26fa28d14610230576100cf565b80631212033b146100d457806328a724ac146101045780634e5a9729146101225780636d3e08b7146101525780637c56176114610182578063931f63f8146101b2575b600080fd5b6100ee60048036038101906100e99190611909565b61030e565b6040516100fb9190611962565b60405180910390f35b61010c610441565b60405161011991906119dc565b60405180910390f35b61013c60048036038101906101379190611909565b610465565b6040516101499190611962565b60405180910390f35b61016c60048036038101906101679190611909565b61065e565b6040516101799190611962565b60405180910390f35b61019c60048036038101906101979190611909565b6108da565b6040516101a99190611962565b60405180910390f35b6101cc60048036038101906101c79190611909565b61090e565b6040516101d99190611962565b60405180910390f35b6101ea610be6565b6040516101f79190611a06565b60405180910390f35b61021a60048036038101906102159190611a21565b610c0c565b6040516102279190611962565b60405180910390f35b61024a60048036038101906102459190611909565b610c3d565b6040516102579190611962565b60405180910390f35b610268610cad565b6040516102759190611a81565b60405180910390f35b61029860048036038101906102939190611a21565b610cd3565b6040516102a59190611962565b60405180910390f35b6102c860048036038101906102c39190611a21565b610d63565b6040516102d59190611962565b60405180910390f35b6102f860048036038101906102f39190611ac8565b61103e565b6040516103059190611962565b60405180910390f35b6000808373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561035757600080fd5b505afa15801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190611b1d565b905060008373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d957600080fd5b505afa1580156103ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104119190611b1d565b9050600061041f858361103e565b610429878561103e565b6104339190611b79565b905080935050505092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b81526004016104c3929190611bcf565b60206040518083038186803b1580156104db57600080fd5b505afa1580156104ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105139190611c48565b905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016105509190611a06565b60206040518083038186803b15801561056857600080fd5b505afa15801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a09190611b1d565b905060008473ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016105dd9190611a06565b60206040518083038186803b1580156105f557600080fd5b505afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190611b1d565b9050600061063b868361103e565b610645888561103e565b61064f9190611b79565b90508094505050505092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b81526004016106bc929190611bcf565b60206040518083038186803b1580156106d457600080fd5b505afa1580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611c48565b905060008173ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b15801561075657600080fd5b505afa15801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190611b1d565b905060008273ffffffffffffffffffffffffffffffffffffffff16638477a6348473ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107f457600080fd5b505afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190611c8a565b6040518263ffffffff1660e01b81526004016108489190611a06565b60206040518083038186803b15801561086057600080fd5b505afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108989190611b1d565b905060006018603c83426108ac9190611cb7565b6108b69190611d1a565b6108c09190611d1a565b905080836108ce9190611d1a565b94505050505092915050565b60006108e6838361030e565b60646108f28585610465565b6108fc9190611d4b565b6109069190611d1a565b905092915050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b815260040161096c929190611bcf565b60206040518083038186803b15801561098457600080fd5b505afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc9190611c48565b905060006109eb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611816565b8273ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3157600080fd5b505afa158015610a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a699190611b1d565b610a739190611d4b565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401610ab09190611a06565b60206040518083038186803b158015610ac857600080fd5b505afa158015610adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b009190611b1d565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610b3d9190611a06565b60206040518083038186803b158015610b5557600080fd5b505afa158015610b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8d9190611b1d565b9050610b99868261103e565b610ba3888461103e565b610bad9190611b79565b6a52b7d2dcc80cd2e4000000606485610bc69190611d4b565b610bd09190611d4b565b610bda9190611d1a565b94505050505092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c1782610cd3565b6064610c2284610d63565b610c2c9190611d4b565b610c369190611d1a565b9050919050565b6000610c498383610465565b670de0b6b3a7640000610c5c858561065e565b610c87600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611816565b610c919190611d4b565b610c9b9190611d4b565b610ca59190611d1a565b905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610d5c828373ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d1f57600080fd5b505afa158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d579190611b1d565b61103e565b9050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5ff5061856040518263ffffffff1660e01b8152600401610dc29190611a06565b60206040518083038186803b158015610dda57600080fd5b505afa158015610dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e129190611b1d565b905060005b8181101561102a5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c75d89d87846040518363ffffffff1660e01b8152600401610e7d929190611da5565b60206040518083038186803b158015610e9557600080fd5b505afa158015610ea9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ecd9190611c8a565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888846040518363ffffffff1660e01b8152600401610f2d929190611bcf565b60206040518083038186803b158015610f4557600080fd5b505afa158015610f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7d9190611c48565b90508673ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b8152600401610fb89190611a06565b60206040518083038186803b158015610fd057600080fd5b505afa158015610fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110089190611b1d565b856110139190611b79565b94505050808061102290611dce565b915050610e17565b50611035848361103e565b92505050919050565b6000805b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663941230606040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a857600080fd5b505afa1580156110bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e09190611b1d565b8110156111fd5760008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930186f2846040518263ffffffff1660e01b81526004016111439190611962565b604080518083038186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190611e17565b915091508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111e857846111d482611816565b6111de9190611d4b565b9350505050611810565b505080806111f590611dce565b915050611042565b5060005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663941230606040518163ffffffff1660e01b815260040160206040518083038186803b15801561126757600080fd5b505afa15801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f9190611b1d565b81101561180a5760008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663930186f2846040518263ffffffff1660e01b81526004016113029190611962565b604080518083038186803b15801561131957600080fd5b505afa15801561132d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113519190611e17565b91509150600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b81526004016113c8929190611bcf565b60206040518083038186803b1580156113e057600080fd5b505afa1580156113f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114189190611c48565b73ffffffffffffffffffffffffffffffffffffffff16146117f55760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b8152600401611491929190611bcf565b60206040518083038186803b1580156114a957600080fd5b505afa1580156114bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e19190611c48565b905060008773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b15801561154257600080fd5b505afa158015611556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157a9190611c8a565b73ffffffffffffffffffffffffffffffffffffffff1614156116c1578173ffffffffffffffffffffffffffffffffffffffff1663131a6f016040518163ffffffff1660e01b815260040160206040518083038186803b1580156115dc57600080fd5b505afa1580156115f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116149190611b1d565b8273ffffffffffffffffffffffffffffffffffffffff1663aa03f2ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561165a57600080fd5b505afa15801561166e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116929190611b1d565b8861169c86611816565b6116a69190611d4b565b6116b09190611d4b565b6116ba9190611d1a565b90506117e8565b8173ffffffffffffffffffffffffffffffffffffffff1663aa03f2ed6040518163ffffffff1660e01b815260040160206040518083038186803b15801561170757600080fd5b505afa15801561171b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173f9190611b1d565b8273ffffffffffffffffffffffffffffffffffffffff1663131a6f016040518163ffffffff1660e01b815260040160206040518083038186803b15801561178557600080fd5b505afa158015611799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bd9190611b1d565b886117c786611816565b6117d19190611d4b565b6117db9190611d4b565b6117e59190611d1a565b90505b8095505050505050611810565b5050808061180290611dce565b915050611201565b50600090505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561185f57600080fd5b505afa158015611873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118979190611ecf565b50505091505080915050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118d6826118ab565b9050919050565b6118e6816118cb565b81146118f157600080fd5b50565b600081359050611903816118dd565b92915050565b600080604083850312156119205761191f6118a6565b5b600061192e858286016118f4565b925050602061193f858286016118f4565b9150509250929050565b6000819050919050565b61195c81611949565b82525050565b60006020820190506119776000830184611953565b92915050565b6000819050919050565b60006119a261199d611998846118ab565b61197d565b6118ab565b9050919050565b60006119b482611987565b9050919050565b60006119c6826119a9565b9050919050565b6119d6816119bb565b82525050565b60006020820190506119f160008301846119cd565b92915050565b611a00816118cb565b82525050565b6000602082019050611a1b60008301846119f7565b92915050565b600060208284031215611a3757611a366118a6565b5b6000611a45848285016118f4565b91505092915050565b6000611a5982611987565b9050919050565b6000611a6b82611a4e565b9050919050565b611a7b81611a60565b82525050565b6000602082019050611a966000830184611a72565b92915050565b611aa581611949565b8114611ab057600080fd5b50565b600081359050611ac281611a9c565b92915050565b60008060408385031215611adf57611ade6118a6565b5b6000611aed858286016118f4565b9250506020611afe85828601611ab3565b9150509250929050565b600081519050611b1781611a9c565b92915050565b600060208284031215611b3357611b326118a6565b5b6000611b4184828501611b08565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b8482611949565b9150611b8f83611949565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bc457611bc3611b4a565b5b828201905092915050565b6000604082019050611be460008301856119f7565b611bf160208301846119f7565b9392505050565b6000611c03826118ab565b9050919050565b6000611c1582611bf8565b9050919050565b611c2581611c0a565b8114611c3057600080fd5b50565b600081519050611c4281611c1c565b92915050565b600060208284031215611c5e57611c5d6118a6565b5b6000611c6c84828501611c33565b91505092915050565b600081519050611c84816118dd565b92915050565b600060208284031215611ca057611c9f6118a6565b5b6000611cae84828501611c75565b91505092915050565b6000611cc282611949565b9150611ccd83611949565b925082821015611ce057611cdf611b4a565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d2582611949565b9150611d3083611949565b925082611d4057611d3f611ceb565b5b828204905092915050565b6000611d5682611949565b9150611d6183611949565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d9a57611d99611b4a565b5b828202905092915050565b6000604082019050611dba60008301856119f7565b611dc76020830184611953565b9392505050565b6000611dd982611949565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e0c57611e0b611b4a565b5b600182019050919050565b60008060408385031215611e2e57611e2d6118a6565b5b6000611e3c85828601611c75565b9250506020611e4d85828601611c75565b9150509250929050565b600069ffffffffffffffffffff82169050919050565b611e7681611e57565b8114611e8157600080fd5b50565b600081519050611e9381611e6d565b92915050565b6000819050919050565b611eac81611e99565b8114611eb757600080fd5b50565b600081519050611ec981611ea3565b92915050565b600080600080600060a08688031215611eeb57611eea6118a6565b5b6000611ef988828901611e84565b9550506020611f0a88828901611eba565b9450506040611f1b88828901611b08565b9350506060611f2c88828901611b08565b9250506080611f3d88828901611e84565b915050929550929590935056fea26469706673582212200b6b93ec36cea90d580fb3d16a245e1583461714666e95a93ad029a8d9b3593164736f6c63430008090033",
  "devdoc": {
    "details": "Smart contract for computing various on chain metrics related to liquidity pools and tokens.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor function initializes the PoolTracker and ETH price feed addresses.",
        "params": {
          "_ethPriceFeed": "Address of the ETH price feed contract.",
          "_poolTracker": "Address of the PoolTracker contract."
        }
      },
      "dailyRate(address,address)": {
        "details": "Computes the daily yield rate for a liquidity pool with two tokens.",
        "params": {
          "tokenAddress": "Address of the first token.",
          "tokenAddress2": "Address of the second token."
        },
        "returns": {
          "_0": "The daily yield rate of the liquidity pool."
        }
      },
      "dailyRoi(address,address)": {
        "details": "Computes the daily ROI for a liquidity pool with two tokens.",
        "params": {
          "tokenAddress": "Address of the first token.",
          "tokenAddress2": "Address of the second token."
        },
        "returns": {
          "_0": "The daily ROI of the liquidity pool."
        }
      },
      "marketCap(address)": {
        "details": "Computes the market capitalization of a token.",
        "params": {
          "tokenAddress": "Address of the token."
        },
        "returns": {
          "_0": "The market capitalization of the token."
        }
      },
      "pairMarketCap(address,address)": {
        "details": "Computes the combined market capitalization of two tokens.",
        "params": {
          "tokenAddress": "Address of the first token.",
          "tokenAddress2": "Address of the second token."
        },
        "returns": {
          "_0": "The combined market capitalization of the two tokens."
        }
      },
      "pairTvl(address,address)": {
        "details": "Computes the combined TVL of two tokens in a liquidity pool.",
        "params": {
          "tokenAddress": "Address of the first token.",
          "tokenAddress2": "Address of the second token."
        },
        "returns": {
          "_0": "The combined TVL of the two tokens."
        }
      },
      "pairTvlRatio(address,address)": {
        "details": "Computes the TVL ratio of a pool, which is pair TVL divided by pair market capitalization.",
        "params": {
          "tokenAddress": "Address of the token."
        },
        "returns": {
          "_0": "The TVL ratio of the token."
        }
      },
      "totalRoi(address,address)": {
        "details": "Computes the total return on investment (ROI) for a liquidity pool with two tokens.",
        "params": {
          "tokenAddress": "Address of the first token.",
          "tokenAddress2": "Address of the second token."
        },
        "returns": {
          "_0": "The total ROI of the liquidity pool."
        }
      },
      "tvl(address)": {
        "details": "Computes the total value locked (TVL) in a liquidity pool for a given token.",
        "params": {
          "tokenAddress": "Address of the token."
        },
        "returns": {
          "_0": "The TVL of the token."
        }
      },
      "tvlRatio(address)": {
        "details": "Computes the TVL ratio of a token, which is TVL divided by market capitalization.",
        "params": {
          "tokenAddress": "Address of the token."
        },
        "returns": {
          "_0": "The TVL ratio of the token."
        }
      },
      "usdValue(address,uint256)": {
        "details": "Computes the USD value of a token based on its amount and price feed.",
        "params": {
          "tokenAddress": "Address of the token.",
          "tokenAmount": "Amount of the token."
        },
        "returns": {
          "_0": "The USD value of the token."
        }
      }
    },
    "title": "PoolMetrics",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1289,
        "contract": "contracts/Dex/PoolMetrics.sol:PoolMetrics",
        "label": "poolTracker",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PoolTracker)2389"
      },
      {
        "astId": 1292,
        "contract": "contracts/Dex/PoolMetrics.sol:PoolMetrics",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(SwapRouter)3197"
      },
      {
        "astId": 1294,
        "contract": "contracts/Dex/PoolMetrics.sol:PoolMetrics",
        "label": "ethPriceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(PoolTracker)2389": {
        "encoding": "inplace",
        "label": "contract PoolTracker",
        "numberOfBytes": "20"
      },
      "t_contract(SwapRouter)3197": {
        "encoding": "inplace",
        "label": "contract SwapRouter",
        "numberOfBytes": "20"
      }
    }
  }
}