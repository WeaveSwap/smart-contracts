{
  "address": "0x46439AdBfA62FF3DC6Cd66A95e36279956ea32ba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_yieldCalculator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PoolTracker_cantSwapSameToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolTracker_pairAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract LiquidityPool",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetOne",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetTwo",
          "type": "address"
        }
      ],
      "name": "poolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "addRoutingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOneAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwoAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOne",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTwo",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destinationChain",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2",
          "type": "address"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getPoolPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoutingAddressesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairToPool",
      "outputs": [
        {
          "internalType": "contract LiquidityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routingAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address2",
          "type": "address"
        }
      ],
      "name": "tokenToRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldCalculator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkBridge",
      "outputs": [
        {
          "internalType": "contract IZKBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc37d646ab8b37213e9b65e11a40c7720222d32298cf875b785903a1dd5f1e2f4",
  "receipt": {
    "to": null,
    "from": "0x540467feca43907A701311D0721df481D1f9e238",
    "contractAddress": "0x46439AdBfA62FF3DC6Cd66A95e36279956ea32ba",
    "transactionIndex": 8,
    "gasUsed": "5372482",
    "logsBloom": "0x
    "blockHash": "0xad8bc2c2fbb63d5eff4de9c3fa496016c81b1d8e50e62b82e7a22dc3fb3e7663",
    "transactionHash": "0xc37d646ab8b37213e9b65e11a40c7720222d32298cf875b785903a1dd5f1e2f4",
    "logs": [],
    "blockNumber": 38280416,
    "cumulativeGasUsed": "6325221",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe6B0e68651FD1163c588Cf8E04d413d3a43EFCad"
  ],
  "numDeployments": 2,
  "solcInputHash": "a491286b4e87cc4d72fac35e4211eb53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldCalculator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PoolTracker_cantSwapSameToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolTracker_pairAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract LiquidityPool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOne\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetTwo\",\"type\":\"address\"}],\"name\":\"poolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"addRoutingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwoAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTwo\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destinationChain\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPoolPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoutingAddressesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairToPool\",\"outputs\":[{\"internalType\":\"contract LiquidityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"}],\"name\":\"tokenToRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkBridge\",\"outputs\":[{\"internalType\":\"contract IZKBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem. Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions. Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\",\"kind\":\"dev\",\"methods\":{\"addRoutingAddress(address,address)\":{\"details\":\"Allows the contract owner to add or update the routing address for a token. This is used for token swaps and price feed lookups.\",\"params\":{\"priceFeed\":\"The Chainlink price feed address for the token.\",\"tokenAddress\":\"The token for which to set the routing.\"}},\"createPool(address,address,uint256,uint256)\":{\"details\":\"Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings. Emits a PoolCreated event upon successful creation. Requirements: - The token pair must not already have an existing pool. - The caller must have approved the contract to spend the necessary token amounts.\",\"params\":{\"_assetOneAddress\":\"The address of the first token in the pair.\",\"_assetTwoAddress\":\"The address of the second token in the pair.\",\"amountOne\":\"The amount of the first token to add to the pool.\",\"amountTwo\":\"The amount of the second token to add to the pool.\"}},\"exists(address,address)\":{\"details\":\"Checks if a liquidity pool exists for a given pair of tokens.\",\"params\":{\"token1\":\"The address of the first token.\",\"token2\":\"The address of the second token.\"},\"returns\":{\"_0\":\"bool Returns true if the pool exists, false otherwise.\"}},\"getPoolPairsLength(address)\":{\"details\":\"Returns length or poolPairs array\",\"returns\":{\"_0\":\"uint256 Returns length.\"}},\"getRoutingAddressesLength()\":{\"details\":\"Returns length or routingAddresses array\",\"returns\":{\"_0\":\"uint256 Returns length.\"}},\"tokenList()\":{\"details\":\"Returns all array of all tradable tokens on the platform\",\"returns\":{\"_0\":\"array Returns tokens array.\"}},\"tokenToRoute(address,address)\":{\"details\":\"Determines the optimal routing token for a swap between two tokens, based on available liquidity and price feeds.\",\"params\":{\"address1\":\"The address of the first token.\",\"address2\":\"The address of the second token.\"},\"returns\":{\"_0\":\"address The address of the optimal routing token.\"}},\"withdrawEther()\":{\"details\":\"owner can withdraw the fees to deposit to yield Calculator\"}},\"title\":\"PoolTracker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex/PoolTracker.sol\":\"PoolTracker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Dex/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"../Router/InterfaceBridge.sol\\\";\\nimport \\\"./PoolTracker.sol\\\";\\n\\n// Custom errors for more descriptive and gas-efficient failure handling.\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @notice Manages liquidity provision, asset swapping, and yield generation in a decentralized manner.\\n * @dev Implements IZKBridgeReceiver interface for cross-chain interactions and yield farming computations.\\n */\\ncontract LiquidityPool is IZKBridgeReceiver {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // State variables\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee = 1000000000000000;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetOneAmount\\n        );\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetTwoAmount\\n        );\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) external noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount *\\n            amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(\\n            msg.sender,\\n            amountOfOppositeTokenNeeded(_asset, _amount),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) external noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) /\\n            100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) /\\n            1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) /\\n            1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) <\\n                initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(uint256 _amount) external payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetOne()) {\\n            payable(msg.sender).transfer(msg.value);\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(uint256 _amount) external payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetTwo()) {\\n            payable(msg.sender).transfer(msg.value); // Transfer value back\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(\\n        address _address\\n    ) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() external view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(\\n        address sellingAsset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     *\\n     * @notice sends the request to yield Calculator smart contract to compute yield with lower gas fee\\n     */\\n    function getYield() public payable {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        //NOW SEND BACK THE AVAILABLE YIELD\\n        uint16 destinationChain = PoolTracker(owner).destinationChain();\\n        IZKBridge zkBridge = PoolTracker(owner).zkBridge();\\n        address yieldCalculator = PoolTracker(owner).yieldCalculator();\\n        bytes memory newPayload = abi.encode(msg.sender);\\n        uint256 fee = zkBridge.estimateFee(destinationChain);\\n        zkBridge.send{value: fee}(\\n            destinationChain,\\n            yieldCalculator,\\n            newPayload\\n        );\\n        // Pay this to our contract which will fund the bridge contract with tokens\\n        uint256 bridgeFee = zkBridge.estimateFee(destinationChain);\\n        (bool sent, ) = payable(owner).call{value: bridgeFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the request for lower gas fee computation\\n     *\\n     * @param payload returns the computation\\n     *\\n     */\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external {\\n        (uint256 availableYield, address user) = abi.decode(\\n            payload,\\n            (uint256, address)\\n        );\\n        //TODO handle your business\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[user] += availableYield;\\n        (bool sent, ) = payable(user).call{value: availableYield}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (\\n            block.timestamp >\\n            (initialLiquidityProvidedTime[msg.sender] + 365 days)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0x70f1fdb35d530a58ce00d90f1d00ea62d10e57055b152a3930b3e58ef64634e8\",\"license\":\"MIT\"},\"contracts/Dex/PoolTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../Router/InterfaceBridge.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror PoolTracker_pairAlreadyExists();\\nerror PoolTracker_cantSwapSameToken();\\n\\n/**\\n * @title PoolTracker\\n * @dev Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem.\\n * Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions.\\n * Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\\n */\\ncontract PoolTracker {\\n    // Tracker for created pools, will add to database\\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\\n\\n    // The owner of the PoolTracker contract, set to the deployer.\\n    address private owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // Hardcoded destination chain identifier and ZK Bridge address\\n    uint16 public destinationChain = 23;\\n    IZKBridge public zkBridge =\\n        IZKBridge(0xb20F0105f3598652a3bE569132F7b3F341106dDC);\\n\\n    // Address of the yield calculator contract, for bridging computational parts.\\n    address public yieldCalculator;\\n\\n    // Constructor: Sets the contract deployer as the owner.\\n    constructor(address _yieldCalculator) {\\n        owner = msg.sender;\\n        yieldCalculator = _yieldCalculator;\\n    }\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert();\\n        }\\n        _;\\n    }\\n\\n    // Mapping of pool Pairs, to store existing ones\\n    mapping(address => address[]) public poolPairs;\\n\\n    // Mapping a pool to the contracts, in case we wont store it in the database\\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\\n\\n    // All the available tokens\\n    address[] public tokens;\\n\\n    /**\\n     * @dev Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial\\n     * transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings.\\n     * Emits a PoolCreated event upon successful creation.\\n     *\\n     * Requirements:\\n     * - The token pair must not already have an existing pool.\\n     * - The caller must have approved the contract to spend the necessary token amounts.\\n     *\\n     * @param _assetOneAddress The address of the first token in the pair.\\n     * @param _assetTwoAddress The address of the second token in the pair.\\n     * @param amountOne The amount of the first token to add to the pool.\\n     * @param amountTwo The amount of the second token to add to the pool.\\n     */\\n    function createPool(\\n        address _assetOneAddress,\\n        address _assetTwoAddress,\\n        uint256 amountOne,\\n        uint256 amountTwo\\n    ) external noReentrancy {\\n        if (\\n            exists(_assetOneAddress, _assetTwoAddress)\\n        ) // To prevent duplicate pools\\n        {\\n            revert PoolTracker_pairAlreadyExists();\\n        }\\n        // Transfer of tokens\\n        IERC20(_assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOne\\n        );\\n        IERC20(_assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountTwo\\n        );\\n        // Creation of pool\\n        LiquidityPool poolAddress = new LiquidityPool(\\n            _assetOneAddress,\\n            _assetTwoAddress\\n        );\\n        // Approve\\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\\n        // Add initial liquidity\\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\\n        // Update mappings\\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\\n\\n        if (tokenExists(_assetOneAddress) == false) {\\n            tokens.push(_assetOneAddress);\\n        }\\n        if (tokenExists(_assetTwoAddress) == false) {\\n            tokens.push(_assetTwoAddress);\\n        }\\n        // Emit the event\\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\\n    }\\n\\n    /**\\n     * @dev Checks if a liquidity pool exists for a given pair of tokens.\\n     *\\n     * @param token1 The address of the first token.\\n     * @param token2 The address of the second token.\\n     * @return bool Returns true if the pool exists, false otherwise.\\n     */\\n    function exists(address token1, address token2) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < poolPairs[token1].length; i++) {\\n            if (poolPairs[token1][i] == token2) {\\n                exist = true;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    /**\\n     * @dev Checks if a token is already tracked by the contract.\\n     *\\n     * @param tokenAddress The address of the token to check.\\n     * @return bool Returns true if the token is tracked, false otherwise.\\n     */\\n    function tokenExists(address tokenAddress) internal view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokenAddress == tokens[i]) {\\n                exist = true;\\n                break;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    // Routing token\\n    struct routingAddress {\\n        address tokenAddress;\\n        address priceFeed;\\n    }\\n\\n    // Array of routing Tokens\\n    routingAddress[] public routingAddresses;\\n\\n    /**\\n     * @dev Allows the contract owner to add or update the routing address for a token.\\n     * This is used for token swaps and price feed lookups.\\n     *\\n     * @param tokenAddress The token for which to set the routing.\\n     * @param priceFeed The Chainlink price feed address for the token.\\n     */\\n    function addRoutingAddress(\\n        address tokenAddress,\\n        address priceFeed\\n    ) external onlyOwner {\\n        if (routingAddresses.length == 0) {\\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n        } else {\\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\\n                    routingAddresses[i] = routingAddress(\\n                        tokenAddress,\\n                        priceFeed\\n                    );\\n                    break;\\n                } else if (i == routingAddresses.length - 1) {\\n                    routingAddresses.push(\\n                        routingAddress(tokenAddress, priceFeed)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Determines the optimal routing token for a swap between two tokens,\\n     * based on available liquidity and price feeds.\\n     *\\n     * @param address1 The address of the first token.\\n     * @param address2 The address of the second token.\\n     * @return address The address of the optimal routing token.\\n     */\\n    function tokenToRoute(\\n        address address1,\\n        address address2\\n    ) external view returns (address) {\\n        if (address1 == address2) {\\n            revert PoolTracker_cantSwapSameToken();\\n        }\\n        address[] memory token1pairs = poolPairs[address1];\\n        address[] memory token2pairs = poolPairs[address2];\\n\\n        address routingToken;\\n        int routingTokenLiquidity;\\n\\n        for (uint256 i; i < token1pairs.length; i++) {\\n            for (uint256 a; a < token2pairs.length; a++) {\\n                if (token1pairs[i] == token2pairs[a]) {\\n                    for (uint256 b; b < routingAddresses.length; b++) {\\n                        if (\\n                            routingAddresses[b].tokenAddress == token1pairs[i]\\n                        ) {\\n                            (, int answer, , , ) = AggregatorV3Interface(\\n                                routingAddresses[b].priceFeed\\n                            ).latestRoundData();\\n                            int liquidity;\\n                            LiquidityPool pool1 = pairToPool[address1][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            LiquidityPool pool2 = pairToPool[address2][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            uint256 balance1 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool1));\\n                            uint256 balance2 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool2));\\n                            liquidity =\\n                                (int(balance1) + int(balance2)) *\\n                                answer;\\n                            if (liquidity > routingTokenLiquidity) {\\n                                // Best choice so far if the liquidity is bigger than previous best token\\n                                routingToken = routingAddresses[b].tokenAddress;\\n                                routingTokenLiquidity = liquidity;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return routingToken;\\n    }\\n\\n    /**\\n     * @dev Returns all array of all tradable tokens on the platform\\n     *\\n     * @return array Returns tokens array.\\n     */\\n    function tokenList() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    /**\\n     * @dev Returns length or routingAddresses array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getRoutingAddressesLength() external view returns (uint256) {\\n        return routingAddresses.length;\\n    }\\n\\n    /**\\n     * @dev Returns length or poolPairs array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getPoolPairsLength(\\n        address tokenAddress\\n    ) external view returns (uint256) {\\n        return poolPairs[tokenAddress].length;\\n    }\\n\\n    /**\\n     * @dev owner can withdraw the fees to deposit to yield Calculator\\n     */\\n    function withdrawEther() external onlyOwner {\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\n            \\\"\\\"\\n        );\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1e28b114bbb312ef730baff55fee62eb2d231840eed9a442a378f6edabf3746f\",\"license\":\"MIT\"},\"contracts/Router/InterfaceBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\ninterface IZKBridge {\\n    // @notice send a zkBridge message to the specified address at a zkBridge endpoint.\\n    // @param dstChainId - the destination chain identifier\\n    // @param dstAddress - the address on destination chain\\n    // @param payload - a custom bytes payload to send to the destination contract\\n    function send(\\n        uint16 dstChainId,\\n        address dstAddress,\\n        bytes memory payload\\n    ) external payable returns (uint64 nonce);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param dstChainId - the destination chain identifier\\n    function estimateFee(uint16 dstChainId) external view returns (uint256 fee);\\n}\\n\\ninterface IZKBridgeReceiver {\\n    // @notice zkBridge endpoint will invoke this function to deliver the message on the destination\\n    // @param srcChainId - the source endpoint identifier\\n    // @param srcAddress - the source sending contract address from the source chain\\n    // @param nonce - the ordered message nonce\\n    // @param payload - a custom bytes payload from send chain\\n    function zkReceive(\\n        uint16 srcChainId,\\n        address srcAddress,\\n        uint64 nonce,\\n        bytes calldata payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x57b2588179cffda143a904e7f55db5eebc526fa479fd3004ea2f521a7fa438a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200010c5760003560e01c80638b273a6811620000a55780639e2c58ca116200006f5780639e2c58ca14620002e6578063b42446591462000308578063f5ff5061146200032a578063fd1337a61462000360576200010c565b80638b273a6814620002215780638c75d89d1462000257578063930186f2146200028d5780639412306014620002c4576200010c565b80636fbe6fea11620000e75780636fbe6fea146200019f5780637362377b14620001bf5780637663f82214620001cb578063884db0631462000201576200010c565b80634f64b2be1462000111578063555324601462000147578063620e3a64146200017d575b600080fd5b6200012f600480360381019062000129919062001d96565b62000382565b6040516200013e919062001e0d565b60405180910390f35b6200016560048036038101906200015f919062001e5b565b620003c2565b60405162000174919062001e0d565b60405180910390f35b6200018762000c20565b60405162000196919062001e0d565b60405180910390f35b620001bd6004803603810190620001b7919062001e5b565b62000c46565b005b620001c962001070565b005b620001e96004803603810190620001e3919062001e5b565b6200117f565b604051620001f8919062001ebf565b60405180910390f35b6200021f600480360381019062000219919062001edc565b620012a9565b005b6200023f600480360381019062000239919062001e5b565b62001a6b565b6040516200024e919062001fb9565b60405180910390f35b6200027560048036038101906200026f919062001fd6565b62001aad565b60405162000284919062001e0d565b60405180910390f35b620002ab6004803603810190620002a5919062001d96565b62001afc565b604051620002bb9291906200201d565b60405180910390f35b620002ce62001b71565b604051620002dd91906200205b565b60405180910390f35b620002f062001b7e565b604051620002ff919062002146565b60405180910390f35b6200031262001c0e565b604051620003219190620021a3565b60405180910390f35b620003486004803603810190620003429190620021c0565b62001c34565b6040516200035791906200205b565b60405180910390f35b6200036a62001c80565b60405162000379919062002211565b60405180910390f35b600581815481106200039357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156200042b576040517fef107d8100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620004ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620004a3575b505050505090506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620005b857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200056d575b5050505050905060008060005b845181101562000c125760005b845181101562000bfb57848181518110620005f257620005f16200222e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168683815181106200062657620006256200222e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141562000be55760005b60068054905081101562000be3578683815181106200067257620006716200222e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1660068281548110620006a757620006a66200222e565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000bcd576000600682815481106200070f576200070e6200222e565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156200078757600080fd5b505afa1580156200079c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007c29190620022f6565b505050915050600080600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600686815481106200082357620008226200222e565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600687815481106200090c576200090b6200222e565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060068681548110620009b457620009b36200222e565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040162000a20919062001e0d565b60206040518083038186803b15801562000a3957600080fd5b505afa15801562000a4e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a7491906200237e565b905060006006878154811062000a8f5762000a8e6200222e565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b815260040162000afb919062001e0d565b60206040518083038186803b15801562000b1457600080fd5b505afa15801562000b29573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b4f91906200237e565b905085818362000b609190620023df565b62000b6c91906200247d565b94508985131562000bc6576006878154811062000b8e5762000b8d6200222e565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169a508499505b5050505050505b808062000bda90620025a4565b9150506200064e565b505b808062000bf290620025a4565b915050620005d2565b50808062000c0990620025a4565b915050620005c5565b508194505050505092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000c9f57600080fd5b6000600680549050141562000db057600660405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200106c565b60005b6006805490508110156200106a578273ffffffffffffffffffffffffffffffffffffffff166006828154811062000def5762000dee6200222e565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000f3b5760405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff168152506006828154811062000e965762000e956200222e565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506200106a565b600160068054905062000f4f9190620025f2565b8114156200105457600660405180604001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b80806200106190620025a4565b91505062000db3565b505b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620010c957600080fd5b60003373ffffffffffffffffffffffffffffffffffffffff1647604051620010f19062002662565b60006040518083038185875af1925050503d806000811462001130576040519150601f19603f3d011682016040523d82523d6000602084013e62001135565b606091505b50509050806200117c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200117390620026da565b60405180910390fd5b50565b60008060005b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110156200129e578373ffffffffffffffffffffffffffffffffffffffff16600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106200123b576200123a6200222e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156200128857600191505b80806200129590620025a4565b91505062001185565b508091505092915050565b600060149054906101000a900460ff1615620012fc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012f3906200274c565b60405180910390fd5b6001600060146101000a81548160ff0219169083151502179055506200132384846200117f565b156200135b576040517f2f5f48b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016200139a939291906200276e565b602060405180830381600087803b158015620013b557600080fd5b505af1158015620013ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013f09190620027dc565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040162001430939291906200276e565b602060405180830381600087803b1580156200144b57600080fd5b505af115801562001460573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014869190620027dc565b5060008484604051620014999062001d48565b620014a69291906200201d565b604051809103906000f080158015620014c3573d6000803e3d6000fd5b5090508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b382856040518363ffffffff1660e01b8152600401620015039291906200280e565b602060405180830381600087803b1580156200151e57600080fd5b505af115801562001533573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015599190620027dc565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b382846040518363ffffffff1660e01b8152600401620015979291906200280e565b602060405180830381600087803b158015620015b257600080fd5b505af1158015620015c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015ed9190620027dc565b508073ffffffffffffffffffffffffffffffffffffffff1663a40f4fa184846040518363ffffffff1660e01b81526004016200162b9291906200283b565b600060405180830381600087803b1580156200164657600080fd5b505af11580156200165b573d6000803e3d6000fd5b50505050600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060001515620019248662001c94565b1515141562001991576005859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60001515620019a08562001c94565b1515141562001a0d576005849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f1bfa76d353829689440900638fb4e4d604519997726fa1ee0f885e3df12ed7f881868660405162001a429392919062002868565b60405180910390a15060008060146101000a81548160ff02191690831515021790555050505050565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003602052816000526040600020818154811062001aca57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6006818154811062001b0d57600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6000600680549050905090565b6060600580548060200260200160405190810160405280929190818152602001828054801562001c0457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162001bb9575b5050505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b600060159054906101000a900461ffff1681565b60008060005b60058054905081101562001d3e576005818154811062001cbf5762001cbe6200222e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141562001d28576001915062001d3e565b808062001d3590620025a4565b91505062001c9a565b5080915050919050565b61365b80620028a683390190565b600080fd5b6000819050919050565b62001d708162001d5b565b811462001d7c57600080fd5b50565b60008135905062001d908162001d65565b92915050565b60006020828403121562001daf5762001dae62001d56565b5b600062001dbf8482850162001d7f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001df58262001dc8565b9050919050565b62001e078162001de8565b82525050565b600060208201905062001e24600083018462001dfc565b92915050565b62001e358162001de8565b811462001e4157600080fd5b50565b60008135905062001e558162001e2a565b92915050565b6000806040838503121562001e755762001e7462001d56565b5b600062001e858582860162001e44565b925050602062001e988582860162001e44565b9150509250929050565b60008115159050919050565b62001eb98162001ea2565b82525050565b600060208201905062001ed6600083018462001eae565b92915050565b6000806000806080858703121562001ef95762001ef862001d56565b5b600062001f098782880162001e44565b945050602062001f1c8782880162001e44565b935050604062001f2f8782880162001d7f565b925050606062001f428782880162001d7f565b91505092959194509250565b6000819050919050565b600062001f7962001f7362001f6d8462001dc8565b62001f4e565b62001dc8565b9050919050565b600062001f8d8262001f58565b9050919050565b600062001fa18262001f80565b9050919050565b62001fb38162001f94565b82525050565b600060208201905062001fd0600083018462001fa8565b92915050565b6000806040838503121562001ff05762001fef62001d56565b5b6000620020008582860162001e44565b9250506020620020138582860162001d7f565b9150509250929050565b600060408201905062002034600083018562001dfc565b62002043602083018462001dfc565b9392505050565b620020558162001d5b565b82525050565b60006020820190506200207260008301846200204a565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620020af8162001de8565b82525050565b6000620020c38383620020a4565b60208301905092915050565b6000602082019050919050565b6000620020e98262002078565b620020f5818562002083565b9350620021028362002094565b8060005b83811015620021395781516200211d8882620020b5565b97506200212a83620020cf565b92505060018101905062002106565b5085935050505092915050565b60006020820190508181036000830152620021628184620020dc565b905092915050565b6000620021778262001f58565b9050919050565b60006200218b826200216a565b9050919050565b6200219d816200217e565b82525050565b6000602082019050620021ba600083018462002192565b92915050565b600060208284031215620021d957620021d862001d56565b5b6000620021e98482850162001e44565b91505092915050565b600061ffff82169050919050565b6200220b81620021f2565b82525050565b600060208201905062002228600083018462002200565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600069ffffffffffffffffffff82169050919050565b6200227e816200225d565b81146200228a57600080fd5b50565b6000815190506200229e8162002273565b92915050565b6000819050919050565b620022b981620022a4565b8114620022c557600080fd5b50565b600081519050620022d981620022ae565b92915050565b600081519050620022f08162001d65565b92915050565b600080600080600060a0868803121562002315576200231462001d56565b5b600062002325888289016200228d565b95505060206200233888828901620022c8565b94505060406200234b88828901620022df565b93505060606200235e88828901620022df565b925050608062002371888289016200228d565b9150509295509295909350565b60006020828403121562002397576200239662001d56565b5b6000620023a784828501620022df565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620023ec82620022a4565b9150620023f983620022a4565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03831360008312151615620024375762002436620023b0565b5b817f8000000000000000000000000000000000000000000000000000000000000000038312600083121615620024725762002471620023b0565b5b828201905092915050565b60006200248a82620022a4565b91506200249783620022a4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615620024d957620024d8620023b0565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615620025195762002518620023b0565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615620025595762002558620023b0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615620025995762002598620023b0565b5b828202905092915050565b6000620025b18262001d5b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620025e757620025e6620023b0565b5b600182019050919050565b6000620025ff8262001d5b565b91506200260c8362001d5b565b925082821015620026225762002621620023b0565b5b828203905092915050565b600081905092915050565b50565b60006200264a6000836200262d565b9150620026578262002638565b600082019050919050565b60006200266f826200263b565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000620026c260148362002679565b9150620026cf826200268a565b602082019050919050565b60006020820190508181036000830152620026f581620026b3565b9050919050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b600062002734600e8362002679565b91506200274182620026fc565b602082019050919050565b60006020820190508181036000830152620027678162002725565b9050919050565b600060608201905062002785600083018662001dfc565b62002794602083018562001dfc565b620027a360408301846200204a565b949350505050565b620027b68162001ea2565b8114620027c257600080fd5b50565b600081519050620027d681620027ab565b92915050565b600060208284031215620027f557620027f462001d56565b5b60006200280584828501620027c5565b91505092915050565b600060408201905062002825600083018562001dfc565b6200283460208301846200204a565b9392505050565b60006040820190506200285260008301856200204a565b6200286160208301846200204a565b9392505050565b60006060820190506200287f600083018662001fa8565b6200288e602083018562001dfc565b6200289d604083018462001dfc565b94935050505056fe608060405266038d7ea4c680006005553480156200001c57600080fd5b506040516200365b3803806200365b833981810160405281019062000042919062000184565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555066038d7ea4c680006005819055505050620001cb565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014c826200011f565b9050919050565b6200015e816200013f565b81146200016a57600080fd5b50565b6000815190506200017e8162000153565b92915050565b600080604083850312156200019e576200019d6200011a565b5b6000620001ae858286016200016d565b9250506020620001c1858286016200016d565b9150509250929050565b61348080620001db6000396000f3fe6080604052600436106101c65760003560e01c80638477a634116100f7578063a97533b811610095578063e35ba8ab11610064578063e35ba8ab1461069b578063e4a76726146106c6578063f318e557146106ef578063ffebfc8c1461071a576101fd565b8063a97533b8146105fe578063aa03f2ed14610629578063ce5efee314610654578063dc1716241461067f576101fd565b80639a61c36a116100d15780639a61c36a146105445780639c8f9f2314610581578063a40f4fa1146105aa578063a8754803146105d3576101fd565b80638477a6341461049f5780638da5cb5b146104dc57806395cc4c5e14610507576101fd565b8063405eae91116101645780634d2d757c1161013e5780634d2d757c1461040257806354cf2aeb1461042d5780637c2628711461045857806381bace7d14610462576101fd565b8063405eae911461039057806340702adc146103bb5780634257dc4c146103e6576101fd565b806328593984116101a057806328593984146102c257806328da1aef146102ed5780632d4ce6691461032a5780632de9952a14610367576101fd565b8063131a6f011461022f5780631a6865021461025a57806324aabb9214610285576101fd565b366101fd576040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561023b57600080fd5b50610244610757565b6040516102519190612a31565b60405180910390f35b34801561026657600080fd5b5061026f610809565b60405161027c9190612a31565b60405180910390f35b34801561029157600080fd5b506102ac60048036038101906102a79190612ab4565b61080f565b6040516102b99190612a31565b60405180910390f35b3480156102ce57600080fd5b506102d7610827565b6040516102e49190612a31565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f9190612b0d565b61082d565b6040516103219190612a31565b60405180910390f35b34801561033657600080fd5b50610351600480360381019061034c9190612ab4565b61099c565b60405161035e9190612a31565b60405180910390f35b34801561037357600080fd5b5061038e60048036038101906103899190612c2c565b610a2e565b005b34801561039c57600080fd5b506103a5610bd8565b6040516103b29190612ccf565b60405180910390f35b3480156103c757600080fd5b506103d0610c87565b6040516103dd9190612a31565b60405180910390f35b61040060048036038101906103fb9190612cea565b610c8d565b005b34801561040e57600080fd5b5061041761111f565b6040516104249190612ccf565b60405180910390f35b34801561043957600080fd5b50610442611188565b60405161044f9190612a31565b60405180910390f35b61046061118e565b005b34801561046e57600080fd5b5061048960048036038101906104849190612ab4565b611666565b6040516104969190612a31565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c19190612ab4565b61176f565b6040516104d39190612a31565b60405180910390f35b3480156104e857600080fd5b506104f1611787565b6040516104fe9190612d26565b60405180910390f35b34801561051357600080fd5b5061052e60048036038101906105299190612b0d565b6117ad565b60405161053b9190612a31565b60405180910390f35b34801561055057600080fd5b5061056b60048036038101906105669190612ab4565b611896565b6040516105789190612a31565b60405180910390f35b34801561058d57600080fd5b506105a860048036038101906105a39190612cea565b6118ae565b005b3480156105b657600080fd5b506105d160048036038101906105cc9190612d41565b611e5a565b005b3480156105df57600080fd5b506105e861215f565b6040516105f59190612d26565b60405180910390f35b34801561060a57600080fd5b50610613612185565b6040516106209190612a31565b60405180910390f35b34801561063557600080fd5b5061063e6121b9565b60405161064b9190612a31565b60405180910390f35b34801561066057600080fd5b5061066961226a565b6040516106769190612d26565b60405180910390f35b61069960048036038101906106949190612cea565b61228e565b005b3480156106a757600080fd5b506106b0612720565b6040516106bd9190612a31565b60405180910390f35b3480156106d257600080fd5b506106ed60048036038101906106e89190612d81565b612754565b005b3480156106fb57600080fd5b506107046129f8565b6040516107119190612a31565b60405180910390f35b34801561072657600080fd5b50610741600480360381019061073c9190612ab4565b612a00565b60405161074e9190612a31565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107b49190612d26565b60206040518083038186803b1580156107cc57600080fd5b505afa1580156107e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108049190612de9565b905090565b60035481565b60076020528060005260406000206000915090505481565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108c95760008261088f6121b9565b6108999190612e45565b90506000816003546108ab9190612eca565b9050806108b6610757565b6108c09190612efb565b92505050610996565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109645760008261092a610757565b6109349190612e45565b90506000816003546109469190612eca565b9050806109516121b9565b61095b9190612efb565b92505050610996565b6040517fd526485500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109d79190612d26565b60206040518083038186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190612de9565b9050919050565b6000808383810190610a409190612f6d565b9150915047821115610a7e576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610acd9190612e45565b9250508190555060008173ffffffffffffffffffffffffffffffffffffffff1683604051610afa90612fde565b60006040518083038185875af1925050503d8060008114610b37576040519150601f19603f3d011682016040523d82523d6000602084013e610b3c565b606091505b5050905080610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790613050565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fbf630ce062dbeaeb6c23a21390208b25de2ac16fb8502eab6054a70d9e34b8ec84604051610bc69190612a31565b60405180910390a25050505050505050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205060004290508062015180600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610c6e9190612e45565b1015610c7e576001915050610c84565b60009150505b90565b60025481565b600660149054906101000a900460ff1615610cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd4906130bc565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550610d006121b9565b8110610d7f573373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610d4c573d6000803e3d6000fd5b506040517fe45bfdc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554341015610dbb576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254610dcf9190612e45565b92505081905550600060055434610de69190612efb565b90506000610df2610757565b9050600083610dff6121b9565b610e099190612e45565b9050600081600354610e1b9190612eca565b905060008184610e2b9190612efb565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401610e8a939291906130dc565b602060405180830381600087803b158015610ea457600080fd5b505af1158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc919061313f565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610f3a92919061316c565b602060405180830381600087803b158015610f5457600080fd5b505af1158015610f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8c919061313f565b5060003373ffffffffffffffffffffffffffffffffffffffff1686604051610fb390612fde565b60006040518083038185875af1925050503d8060008114610ff0576040519150601f19603f3d011682016040523d82523d6000602084013e610ff5565b606091505b5050905080611039576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103090613050565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611083612185565b60405161109192919061316c565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166110e5612720565b6040516110f392919061316c565b60405180910390a15050505050506000600660146101000a81548160ff02191690831515021790555050565b60006301e13380600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111709190612e45565b4211156111805760019050611185565b600090505b90565b60055481565b6000151561119a610bd8565b151514156111d4576040517ffdbfe33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd1337a66040518163ffffffff1660e01b815260040160206040518083038186803b15801561123e57600080fd5b505afa158015611252573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127691906131aa565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b42446596040518163ffffffff1660e01b815260040160206040518083038186803b1580156112e257600080fd5b505afa1580156112f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131a9190613215565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663620e3a646040518163ffffffff1660e01b815260040160206040518083038186803b15801561138657600080fd5b505afa15801561139a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113be9190613257565b90506000336040516020016113d39190612d26565b604051602081830303815290604052905060008373ffffffffffffffffffffffffffffffffffffffff1663207bae8a866040518263ffffffff1660e01b815260040161141f9190613293565b60206040518083038186803b15801561143757600080fd5b505afa15801561144b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146f9190612de9565b90508373ffffffffffffffffffffffffffffffffffffffff1663b1d995dd828786866040518563ffffffff1660e01b81526004016114af93929190613347565b6020604051808303818588803b1580156114c857600080fd5b505af11580156114dc573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611501919061339a565b5060008473ffffffffffffffffffffffffffffffffffffffff1663207bae8a876040518263ffffffff1660e01b815260040161153d9190613293565b60206040518083038186803b15801561155557600080fd5b505afa158015611569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158d9190612de9565b90506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516115d790612fde565b60006040518083038185875af1925050503d8060008114611614576040519150601f19603f3d011682016040523d82523d6000602084013e611619565b606091505b505090508061165d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165490613050565b60405180910390fd5b50505050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156116f157503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15611728576040517f2ffae41300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a6020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156118385761180c6121b9565b670de0b6b3a764000061181d610757565b61182791906133c7565b6118319190612eca565b9050611868565b611840610757565b670de0b6b3a76400006118516121b9565b61185b91906133c7565b6118659190612eca565b90505b6000670de0b6b3a7640000828561187f91906133c7565b6118899190612eca565b9050809250505092915050565b60086020528060005260406000206000915090505481565b600660149054906101000a900460ff16156118fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f5906130bc565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600354670de0b6b3a76400008361197691906133c7565b6119809190612eca565b905060006064848361199291906133c7565b61199c9190612eca565b90506000670de0b6b3a76400006119b16121b9565b836119bc91906133c7565b6119c69190612eca565b90506000670de0b6b3a76400006119db610757565b846119e691906133c7565b6119f09190612eca565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148015611a5a575060001515611a5661111f565b1515145b8015611abc57506002548183611a7091906133c7565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611aba9190612efb565b105b15611af3576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b4d9190612d26565b60206040518083038186803b158015611b6557600080fd5b505afa158015611b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9d9190612de9565b1080611c52575080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c009190612d26565b60206040518083038186803b158015611c1857600080fd5b505afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c509190612de9565b105b15611c89576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611ce492919061316c565b602060405180830381600087803b158015611cfe57600080fd5b505af1158015611d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d36919061313f565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611d9492919061316c565b602060405180830381600087803b158015611dae57600080fd5b505af1158015611dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de6919061313f565b503373ffffffffffffffffffffffffffffffffffffffff167fbad053f5b243c76f17611a28d4554167bd09e3491be13032dd4af620e8e228728383604051611e2f929190613421565b60405180910390a250505050506000600660146101000a81548160ff02191690831515021790555050565b600660009054906101000a9050506000600a6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611f04576040517f17ebf42200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611fa5939291906130dc565b602060405180830381600087803b158015611fbf57600080fd5b505af1158015611fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff7919061313f565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401612057939291906130dc565b602060405180830381600087803b15801561207157600080fd5b505af1158015612085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a9919061313f565b5080826120b691906133c7565b600281905550600254600381905550600254600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6148383604051612153929190613421565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061218f6121b9565b670de0b6b3a76400006121a0610757565b6121aa91906133c7565b6121b49190612eca565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016122159190612d26565b60206040518083038186803b15801561222d57600080fd5b505afa158015612241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122659190612de9565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660149054906101000a900460ff16156122de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d5906130bc565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550612301610757565b8110612380573373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561234d573d6000803e3d6000fd5b506040517fe45bfdc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005543410156123bc576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554600460008282546123d09190612e45565b925050819055506000600554346123e79190612efb565b905060006123f36121b9565b9050600083612400610757565b61240a9190612e45565b905060008160035461241c9190612eca565b90506000818461242c9190612efb565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161248d939291906130dc565b602060405180830381600087803b1580156124a757600080fd5b505af11580156124bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124df919061313f565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161253b92919061316c565b602060405180830381600087803b15801561255557600080fd5b505af1158015612569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258d919061313f565b5060003373ffffffffffffffffffffffffffffffffffffffff16866040516125b490612fde565b60006040518083038185875af1925050503d80600081146125f1576040519150601f19603f3d011682016040523d82523d6000602084013e6125f6565b606091505b505090508061263a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263190613050565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612684612185565b60405161269292919061316c565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166126e6612720565b6040516126f492919061316c565b60405180910390a15050505050506000600660146101000a81548160ff02191690831515021790555050565b600061272a610757565b670de0b6b3a764000061273b6121b9565b61274591906133c7565b61274f9190612eca565b905090565b600660149054906101000a900460ff16156127a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161279b906130bc565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33306127e787866117ad565b6040518463ffffffff1660e01b8152600401612805939291906130dc565b602060405180830381600087803b15801561281f57600080fd5b505af1158015612833573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612857919061313f565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401612895939291906130dc565b602060405180830381600087803b1580156128af57600080fd5b505af11580156128c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e7919061313f565b506128f283826117ad565b816128fd91906133c7565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461294b9190612e45565b9250508190555061295c83826117ad565b8161296791906133c7565b600360008282546129789190612e45565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6146129c185846117ad565b836040516129d0929190613421565b60405180910390a26000600660146101000a81548160ff021916908315150217905550505050565b600047905090565b60096020528060005260406000206000915090505481565b6000819050919050565b612a2b81612a18565b82525050565b6000602082019050612a466000830184612a22565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a8182612a56565b9050919050565b612a9181612a76565b8114612a9c57600080fd5b50565b600081359050612aae81612a88565b92915050565b600060208284031215612aca57612ac9612a4c565b5b6000612ad884828501612a9f565b91505092915050565b612aea81612a18565b8114612af557600080fd5b50565b600081359050612b0781612ae1565b92915050565b60008060408385031215612b2457612b23612a4c565b5b6000612b3285828601612a9f565b9250506020612b4385828601612af8565b9150509250929050565b600061ffff82169050919050565b612b6481612b4d565b8114612b6f57600080fd5b50565b600081359050612b8181612b5b565b92915050565b600067ffffffffffffffff82169050919050565b612ba481612b87565b8114612baf57600080fd5b50565b600081359050612bc181612b9b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612bec57612beb612bc7565b5b8235905067ffffffffffffffff811115612c0957612c08612bcc565b5b602083019150836001820283011115612c2557612c24612bd1565b5b9250929050565b600080600080600060808688031215612c4857612c47612a4c565b5b6000612c5688828901612b72565b9550506020612c6788828901612a9f565b9450506040612c7888828901612bb2565b935050606086013567ffffffffffffffff811115612c9957612c98612a51565b5b612ca588828901612bd6565b92509250509295509295909350565b60008115159050919050565b612cc981612cb4565b82525050565b6000602082019050612ce46000830184612cc0565b92915050565b600060208284031215612d0057612cff612a4c565b5b6000612d0e84828501612af8565b91505092915050565b612d2081612a76565b82525050565b6000602082019050612d3b6000830184612d17565b92915050565b60008060408385031215612d5857612d57612a4c565b5b6000612d6685828601612af8565b9250506020612d7785828601612af8565b9150509250929050565b600080600060608486031215612d9a57612d99612a4c565b5b6000612da886828701612a9f565b9350506020612db986828701612a9f565b9250506040612dca86828701612af8565b9150509250925092565b600081519050612de381612ae1565b92915050565b600060208284031215612dff57612dfe612a4c565b5b6000612e0d84828501612dd4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e5082612a18565b9150612e5b83612a18565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e9057612e8f612e16565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ed582612a18565b9150612ee083612a18565b925082612ef057612eef612e9b565b5b828204905092915050565b6000612f0682612a18565b9150612f1183612a18565b925082821015612f2457612f23612e16565b5b828203905092915050565b6000612f3a82612a56565b9050919050565b612f4a81612f2f565b8114612f5557600080fd5b50565b600081359050612f6781612f41565b92915050565b60008060408385031215612f8457612f83612a4c565b5b6000612f9285828601612af8565b9250506020612fa385828601612f58565b9150509250929050565b600081905092915050565b50565b6000612fc8600083612fad565b9150612fd382612fb8565b600082019050919050565b6000612fe982612fbb565b9150819050919050565b600082825260208201905092915050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b600061303a601483612ff3565b915061304582613004565b602082019050919050565b600060208201905081810360008301526130698161302d565b9050919050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b60006130a6600e83612ff3565b91506130b182613070565b602082019050919050565b600060208201905081810360008301526130d581613099565b9050919050565b60006060820190506130f16000830186612d17565b6130fe6020830185612d17565b61310b6040830184612a22565b949350505050565b61311c81612cb4565b811461312757600080fd5b50565b60008151905061313981613113565b92915050565b60006020828403121561315557613154612a4c565b5b60006131638482850161312a565b91505092915050565b60006040820190506131816000830185612d17565b61318e6020830184612a22565b9392505050565b6000815190506131a481612b5b565b92915050565b6000602082840312156131c0576131bf612a4c565b5b60006131ce84828501613195565b91505092915050565b60006131e282612a76565b9050919050565b6131f2816131d7565b81146131fd57600080fd5b50565b60008151905061320f816131e9565b92915050565b60006020828403121561322b5761322a612a4c565b5b600061323984828501613200565b91505092915050565b60008151905061325181612a88565b92915050565b60006020828403121561326d5761326c612a4c565b5b600061327b84828501613242565b91505092915050565b61328d81612b4d565b82525050565b60006020820190506132a86000830184613284565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156132e85780820151818401526020810190506132cd565b838111156132f7576000848401525b50505050565b6000601f19601f8301169050919050565b6000613319826132ae565b61332381856132b9565b93506133338185602086016132ca565b61333c816132fd565b840191505092915050565b600060608201905061335c6000830186613284565b6133696020830185612d17565b818103604083015261337b818461330e565b9050949350505050565b60008151905061339481612b9b565b92915050565b6000602082840312156133b0576133af612a4c565b5b60006133be84828501613385565b91505092915050565b60006133d282612a18565b91506133dd83612a18565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561341657613415612e16565b5b828202905092915050565b60006040820190506134366000830185612a22565b6134436020830184612a22565b939250505056fea2646970667358221220354043483df77db04d9df6785a4dc19cba5f8f4fc8ee5b25359914ef5c33462e64736f6c63430008090033a2646970667358221220d3d743ec0588c172ae912727fd52d3377d07867f5e0fb1ed0ebe7889e6676e4964736f6c63430008090033",
  "devdoc": {
    "details": "Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem. Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions. Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.",
    "kind": "dev",
    "methods": {
      "addRoutingAddress(address,address)": {
        "details": "Allows the contract owner to add or update the routing address for a token. This is used for token swaps and price feed lookups.",
        "params": {
          "priceFeed": "The Chainlink price feed address for the token.",
          "tokenAddress": "The token for which to set the routing."
        }
      },
      "createPool(address,address,uint256,uint256)": {
        "details": "Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings. Emits a PoolCreated event upon successful creation. Requirements: - The token pair must not already have an existing pool. - The caller must have approved the contract to spend the necessary token amounts.",
        "params": {
          "_assetOneAddress": "The address of the first token in the pair.",
          "_assetTwoAddress": "The address of the second token in the pair.",
          "amountOne": "The amount of the first token to add to the pool.",
          "amountTwo": "The amount of the second token to add to the pool."
        }
      },
      "exists(address,address)": {
        "details": "Checks if a liquidity pool exists for a given pair of tokens.",
        "params": {
          "token1": "The address of the first token.",
          "token2": "The address of the second token."
        },
        "returns": {
          "_0": "bool Returns true if the pool exists, false otherwise."
        }
      },
      "getPoolPairsLength(address)": {
        "details": "Returns length or poolPairs array",
        "returns": {
          "_0": "uint256 Returns length."
        }
      },
      "getRoutingAddressesLength()": {
        "details": "Returns length or routingAddresses array",
        "returns": {
          "_0": "uint256 Returns length."
        }
      },
      "tokenList()": {
        "details": "Returns all array of all tradable tokens on the platform",
        "returns": {
          "_0": "array Returns tokens array."
        }
      },
      "tokenToRoute(address,address)": {
        "details": "Determines the optimal routing token for a swap between two tokens, based on available liquidity and price feeds.",
        "params": {
          "address1": "The address of the first token.",
          "address2": "The address of the second token."
        },
        "returns": {
          "_0": "address The address of the optimal routing token."
        }
      },
      "withdrawEther()": {
        "details": "owner can withdraw the fees to deposit to yield Calculator"
      }
    },
    "title": "PoolTracker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1815,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1817,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "locked",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1820,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "destinationChain",
        "offset": 21,
        "slot": "0",
        "type": "t_uint16"
      },
      {
        "astId": 1826,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "zkBridge",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IZKBridge)5751"
      },
      {
        "astId": 1828,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "yieldCalculator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1880,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "poolPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1887,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "pairToPool",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_contract(LiquidityPool)1275))"
      },
      {
        "astId": 1890,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "tokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2131,
        "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
        "label": "routingAddresses",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(routingAddress)2127_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(routingAddress)2127_storage)dyn_storage": {
        "base": "t_struct(routingAddress)2127_storage",
        "encoding": "dynamic_array",
        "label": "struct PoolTracker.routingAddress[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IZKBridge)5751": {
        "encoding": "inplace",
        "label": "contract IZKBridge",
        "numberOfBytes": "20"
      },
      "t_contract(LiquidityPool)1275": {
        "encoding": "inplace",
        "label": "contract LiquidityPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_contract(LiquidityPool)1275)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract LiquidityPool)",
        "numberOfBytes": "32",
        "value": "t_contract(LiquidityPool)1275"
      },
      "t_mapping(t_address,t_mapping(t_address,t_contract(LiquidityPool)1275))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => contract LiquidityPool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_contract(LiquidityPool)1275)"
      },
      "t_struct(routingAddress)2127_storage": {
        "encoding": "inplace",
        "label": "struct PoolTracker.routingAddress",
        "members": [
          {
            "astId": 2124,
            "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2126,
            "contract": "contracts/Dex/PoolTracker.sol:PoolTracker",
            "label": "priceFeed",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}