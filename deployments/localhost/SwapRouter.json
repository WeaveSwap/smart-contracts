{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tracker",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "SwapRouter_tokensCantBeSwapped",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "address2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "address1Amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "address2Amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "getSwapAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "address1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "address2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "swapAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x182e02d7980277c3389db71b09161629345b2c7f74c2b852930d820de3621636",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1790040",
    "logsBloom": "0x
    "blockHash": "0x683741e474ccc5b3bf20a1d1366091ee78ccbb8940c9a9c4d821be35503305bc",
    "transactionHash": "0x182e02d7980277c3389db71b09161629345b2c7f74c2b852930d820de3621636",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "1790040",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "6099a49f1005e52c72e7816be8f89ab8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tracker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SwapRouter_tokensCantBeSwapped\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"address1Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"address2Amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"getSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"swapAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dex/WeaveSwap.sol\":\"SwapRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Dex/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @dev A decentralized liquidity pool contract for swapping assets and providing liquidity.\\n */\\ncontract LiquidityPool {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // Token Addresses\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n\\n    // Liquidity and Yield (fees)\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to change the swap fee. Only callable by the owner.\\n     * @param newSwapFee The new swap fee to set.\\n     */\\n    function changeSwapFee(uint256 newSwapFee) public onlyOwner {\\n        swapFee = newSwapFee;\\n    }\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetOneAmount\\n        );\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _assetTwoAmount\\n        );\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) public noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount *\\n            amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(\\n            msg.sender,\\n            amountOfOppositeTokenNeeded(_asset, _amount),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) public noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) /\\n            100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) /\\n            1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) /\\n            1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) <\\n                initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(uint256 _amount) public payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetOne()) {\\n            payable(msg.sender).transfer(msg.value);\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        payable(msg.sender).transfer(unrequiredFee); // Sending back the unrequired fee\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(uint256 _amount) public payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetTwo()) {\\n            payable(msg.sender).transfer(msg.value); // Transfer value back\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        payable(msg.sender).transfer(unrequiredFee); // Sending back the unrequired fee\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(\\n        address _address\\n    ) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the total liquidity in the pool.\\n     * @return The total liquidity in the pool.\\n     */\\n    function getLiquidity() public view returns (uint256) {\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @dev Function to get the current swap fee percentage.\\n     * @return The current swap fee percentage.\\n     */\\n    function getSwapFee() public view returns (uint256) {\\n        return swapFee;\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(\\n        address sellingAsset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    /**\\n     * @dev Function to get the current yield amount available in the pool.\\n     * @return The current yield amount.\\n     */\\n    function yieldAmount() public view returns (uint256) {\\n        return yield;\\n    }\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     */\\n    function getYield() public {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        lastYieldFarmedTime[msg.sender] = block.timestamp; // Reentrancy guard\\n        uint256 yieldSoFar = yieldTaken[msg.sender];\\n        uint256 userLiquidity = (lpTokenQuantity[msg.sender] * 100) / liquidity;\\n        uint256 availableYield = ((yield -\\n            ((yieldSoFar * 100) / userLiquidity)) * userLiquidity) / 100;\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[msg.sender] += availableYield;\\n        payable(msg.sender).transfer(availableYield);\\n\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (\\n            block.timestamp >\\n            (initialLiquidityProvidedTime[msg.sender] + 365 days)\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0x8ed71ca1f461013a15580993099a68ad03f0085b2c72d236aa1f1885854a3b33\",\"license\":\"MIT\"},\"contracts/Dex/PoolTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Errors\\nerror PoolTracker_noTokensDetected();\\nerror PoolTracker_pairAlreadyExists();\\nerror PoolTracker_addressNotAllowed();\\n\\n// To do:\\n// Timer: if the owner doesnt deploy initial liquidity in one day the\\n// liquidity pool gets untracked, is not part of platform anymore\\ncontract PoolTracker {\\n    // PoolTracker Owner\\n    address owner;\\n\\n    // Constructor, sets the owner\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    // Tracker for created pools, will add to database\\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\\n\\n    // Mapping of pool Pairs, to store existing ones\\n    mapping(address => address[]) public poolPairs;\\n\\n    // Mapping a pool to the contracts, in case we wont store it in the database\\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\\n\\n    // All the available tokens\\n    address[] public tokens;\\n\\n    // Mapping of pool per Owner\\n    mapping(address => LiquidityPool[]) public poolOwner;\\n\\n    // Pool creator, approve enough for two transferfroms(one to contract(by msg sender) and one from contract(by contract))\\n    function createPool(\\n        address _assetOneAddress,\\n        address _assetTwoAddress,\\n        uint256 amountOne,\\n        uint256 amountTwo\\n    ) external noReentrancy {\\n        if (\\n            exists(_assetOneAddress, _assetTwoAddress)\\n        ) // To prevent duplicate pools\\n        {\\n            revert PoolTracker_pairAlreadyExists();\\n        }\\n        // Transfer of tokens\\n        IERC20(_assetOneAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOne\\n        );\\n        IERC20(_assetTwoAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountTwo\\n        );\\n        // Creation of pool\\n        LiquidityPool poolAddress = new LiquidityPool(\\n            _assetOneAddress,\\n            _assetTwoAddress\\n        );\\n        // Approve\\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\\n        // Add initial liquidity\\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\\n        // Update mappings\\n        poolOwner[msg.sender].push(poolAddress);\\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\\n\\n        // tokens.push()\\n        if (tokenExists(_assetOneAddress) == false) {\\n            tokens.push(_assetOneAddress);\\n        }\\n        if (tokenExists(_assetTwoAddress) == false) {\\n            tokens.push(_assetTwoAddress);\\n        }\\n        // Emit the event\\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\\n    }\\n\\n    // To check if a pool pair exists\\n    function exists(address token1, address token2) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < poolPairs[token1].length; i++) {\\n            if (poolPairs[token1][i] == token2) {\\n                exist = true;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    function tokenExists(address tokenAddress) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokenAddress == tokens[i]) {\\n                exist = true;\\n                break;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    // Routing token\\n    struct routingAddress {\\n        address tokenAddress;\\n        address priceFeed;\\n    }\\n\\n    // Array of routing Tokens\\n    routingAddress[] public routingAddresses;\\n\\n    //\\n    function addRoutingAddress(address tokenAddress, address priceFeed) public {\\n        if (msg.sender != owner) {\\n            revert PoolTracker_addressNotAllowed();\\n        }\\n        if (routingAddresses.length == 0) {\\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n        } else {\\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\\n                    routingAddresses[i] = routingAddress(\\n                        tokenAddress,\\n                        priceFeed\\n                    ); // In case we want to update priceFeed address of existing token\\n                    break;\\n                } else if (i == routingAddresses.length - 1) {\\n                    // If it is the last one and isnt the same\\n                    routingAddresses.push(\\n                        routingAddress(tokenAddress, priceFeed)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function tokenToRoute(\\n        address address1,\\n        address address2\\n    ) public view returns (address) {\\n        address[] memory token1pairs = poolPairs[address1];\\n        address[] memory token2pairs = poolPairs[address2];\\n\\n        address routingToken;\\n        int routingTokenLiquidity;\\n\\n        for (uint256 i; i < token1pairs.length; i++) {\\n            for (uint256 a; a < token2pairs.length; a++) {\\n                if (token1pairs[i] == token2pairs[a]) {\\n                    for (uint256 b; b < routingAddresses.length; b++) {\\n                        if (\\n                            routingAddresses[b].tokenAddress == token1pairs[i]\\n                        ) {\\n                            (, int answer, , , ) = AggregatorV3Interface(\\n                                routingAddresses[b].priceFeed\\n                            ).latestRoundData();\\n                            int liquidity;\\n                            LiquidityPool pool1 = pairToPool[address1][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            LiquidityPool pool2 = pairToPool[address2][\\n                                routingAddresses[b].tokenAddress\\n                            ];\\n                            uint256 balance1 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool1));\\n                            uint256 balance2 = IERC20(\\n                                routingAddresses[b].tokenAddress\\n                            ).balanceOf(address(pool2));\\n                            liquidity =\\n                                (int(balance1) + int(balance2)) *\\n                                answer;\\n                            if (liquidity > routingTokenLiquidity) {\\n                                // Best choice so far if the liquidty is bigger than previous best token\\n                                routingToken = routingAddresses[b].tokenAddress;\\n                                routingTokenLiquidity = liquidity;\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return routingToken;\\n    }\\n}\\n\",\"keccak256\":\"0x4c2e2872eeb83c5a01917433564fd01034fd145d22c73cdb09ba5ab1879a4f24\",\"license\":\"MIT\"},\"contracts/Dex/WeaveSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"./PoolTracker.sol\\\";\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nerror SwapRouter_tokensCantBeSwapped();\\n\\ncontract SwapRouter {\\n\\n    event swap(\\n        address userAddress,\\n        address address1,\\n        address address2,\\n        uint256 address1Amount,\\n        uint256 address2Amount\\n    );\\n\\n    // Pool tracker address\\n    PoolTracker poolTracker;\\n\\n    constructor(address tracker) {\\n        poolTracker = PoolTracker(tracker);\\n    }\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    // address1 input, address2 output\\n    // approve amount\\n    function swapAsset(address address1, address address2, uint256 inputAmount) public noReentrancy {\\n        if (poolTracker.exists(address1, address2)) {\\n            // FUNCTION TO SWAP THE TOKENS if there is a direct pool\\n            // FIND THE POOL\\n            // PERFORM A SWAP\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            uint256 startingBalanceAddress2 = IERC20(address2).balanceOf(address(this));\\n            if (pool.assetOneAddress() == address1) {\\n                IERC20(address1).transferFrom(msg.sender, address(this), inputAmount);\\n                IERC20(address1).approve(address(pool), inputAmount);\\n                pool.sellAssetOne(inputAmount);\\n            } else {\\n                IERC20(address1).transferFrom(msg.sender, address(this), inputAmount);\\n                IERC20(address1).approve(address(pool), inputAmount);\\n                pool.sellAssetTwo(inputAmount);\\n            }\\n            uint256 amountOutput = IERC20(address2).balanceOf(address(this)) -\\n                startingBalanceAddress2;\\n            IERC20(address2).transfer(msg.sender, amountOutput);\\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\\n            // ROUTING THROUGH ANOTHER TOKEN if there is no direct pool\\n            // CHECK WHICH TOKEN TO ROUTE\\n            // GET THE POOLS OF ROUTED TOKEN AND ADDRESSES\\n            // CALCULATE THE AMOUNT OF OUTPUT AND PERFORM THE SWAPS\\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(address1, routingToken);\\n            LiquidityPool pool2 = poolTracker.pairToPool(address2, routingToken);\\n            uint256 startingBalance = IERC20(routingToken).balanceOf(address(this));\\n            uint256 startingBalance2 = IERC20(address2).balanceOf(address(this));\\n            //SWAP 1, input token into routing  token\\n            if (pool1.assetOneAddress() == address1) {\\n                IERC20(address1).transferFrom(msg.sender, address(this), inputAmount);\\n                IERC20(address1).approve(address(pool1), inputAmount);\\n                pool1.sellAssetOne(inputAmount);\\n            } else {\\n                IERC20(address1).transferFrom(msg.sender, address(this), inputAmount);\\n                IERC20(address1).approve(address(pool1), inputAmount);\\n                pool1.sellAssetTwo(inputAmount);\\n            }\\n            //SWAP 2, routing token into output token\\n            uint256 routingTokenInput = IERC20(routingToken).balanceOf(address(this)) -\\n                startingBalance;\\n            if (pool2.assetOneAddress() == address1) {\\n                IERC20(routingToken).approve(address(pool2), routingTokenInput);\\n                pool2.sellAssetOne(routingTokenInput);\\n            } else {\\n                IERC20(routingToken).approve(address(pool2), routingTokenInput);\\n                pool2.sellAssetTwo(routingTokenInput);\\n            }\\n            uint256 address2Output = IERC20(address2).balanceOf(address(this)) - startingBalance2;\\n            IERC20(address2).transfer(msg.sender, address2Output);\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n    }\\n\\n    // Address1 selling asset\\n    // Address2 buying asset\\n    // inputAmount amount of address1 we want to output\\n    function getSwapAmount(\\n        address address1,\\n        address address2,\\n        uint256 inputAmount\\n    ) public view returns (uint256) {\\n        uint256 output;\\n        if (poolTracker.exists(address1, address2)) {\\n            // Get pool\\n            LiquidityPool pool = poolTracker.pairToPool(address1, address2);\\n            // Get asset two\\n            output = pool.getSwapQuantity(address1, inputAmount);\\n        } else if (poolTracker.tokenToRoute(address1, address2) != address(0)) {\\n            address routingToken = poolTracker.tokenToRoute(address1, address2);\\n            LiquidityPool pool1 = poolTracker.pairToPool(address1, routingToken);\\n            LiquidityPool pool2 = poolTracker.pairToPool(address2, routingToken);\\n            uint256 routingOutput = pool1.getSwapQuantity(address1, inputAmount);\\n            output = pool2.getSwapQuantity(routingToken, routingOutput);\\n        } else {\\n            // Assets cant be swapped directly nor routed\\n            revert SwapRouter_tokensCantBeSwapped();\\n        }\\n        return output;\\n    }\\n}\\n\",\"keccak256\":\"0x4529ef9295f450c2a9506906090120c3cd31c9e9394fca21e83eefa9bb2ea28e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002022380380620020228339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b611ef8806200012a6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063635bc0c21461003b578063fe9f5c051461006b575b600080fd5b61005560048036038101906100509190611b4c565b610087565b6040516100629190611bae565b60405180910390f35b61008560048036038101906100809190611b4c565b6106ce565b005b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82286866040518363ffffffff1660e01b81526004016100e5929190611bd8565b60206040518083038186803b1580156100fd57600080fd5b505afa158015610111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101359190611c39565b1561027d5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6887876040518363ffffffff1660e01b8152600401610198929190611bd8565b60206040518083038186803b1580156101b057600080fd5b505afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190611cb6565b90508073ffffffffffffffffffffffffffffffffffffffff166328da1aef87866040518363ffffffff1660e01b8152600401610225929190611ce3565b60206040518083038186803b15801561023d57600080fd5b505afa158015610251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102759190611d21565b9150506106c3565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b81526004016102f0929190611bd8565b60206040518083038186803b15801561030857600080fd5b505afa15801561031c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103409190611d63565b73ffffffffffffffffffffffffffffffffffffffff16146106905760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b81526004016103b9929190611bd8565b60206040518083038186803b1580156103d157600080fd5b505afa1580156103e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104099190611d63565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888846040518363ffffffff1660e01b8152600401610469929190611bd8565b60206040518083038186803b15801561048157600080fd5b505afa158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190611cb6565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b8152600401610519929190611bd8565b60206040518083038186803b15801561053157600080fd5b505afa158015610545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105699190611cb6565b905060008273ffffffffffffffffffffffffffffffffffffffff166328da1aef8a896040518363ffffffff1660e01b81526004016105a8929190611ce3565b60206040518083038186803b1580156105c057600080fd5b505afa1580156105d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f89190611d21565b90508173ffffffffffffffffffffffffffffffffffffffff166328da1aef85836040518363ffffffff1660e01b8152600401610635929190611ce3565b60206040518083038186803b15801561064d57600080fd5b505afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190611d21565b9450505050506106c2565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b809150509392505050565b600060149054906101000a900460ff161561071e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071590611ded565b60405180910390fd5b6001600060146101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82284846040518363ffffffff1660e01b8152600401610794929190611bd8565b60206040518083038186803b1580156107ac57600080fd5b505afa1580156107c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e49190611c39565b15610e1d5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b8152600401610847929190611bd8565b60206040518083038186803b15801561085f57600080fd5b505afa158015610873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108979190611cb6565b905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108d49190611e0d565b60206040518083038186803b1580156108ec57600080fd5b505afa158015610900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109249190611d21565b90508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b15801561098357600080fd5b505afa158015610997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bb9190611d63565b73ffffffffffffffffffffffffffffffffffffffff161415610b65578473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a1493929190611e28565b602060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a669190611c39565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b8152600401610aa2929190611ce3565b602060405180830381600087803b158015610abc57600080fd5b505af1158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190611c39565b508173ffffffffffffffffffffffffffffffffffffffff16634257dc4c846040518263ffffffff1660e01b8152600401610b2e9190611bae565b600060405180830381600087803b158015610b4857600080fd5b505af1158015610b5c573d6000803e3d6000fd5b50505050610cef565b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610ba293929190611e28565b602060405180830381600087803b158015610bbc57600080fd5b505af1158015610bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf49190611c39565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b8152600401610c30929190611ce3565b602060405180830381600087803b158015610c4a57600080fd5b505af1158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190611c39565b508173ffffffffffffffffffffffffffffffffffffffff1663dc171624846040518263ffffffff1660e01b8152600401610cbc9190611bae565b600060405180830381600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b505050505b6000818573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d2b9190611e0d565b60206040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b9190611d21565b610d859190611e8e565b90508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610dc2929190611ce3565b602060405180830381600087803b158015610ddc57600080fd5b505af1158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e149190611c39565b50505050611a94565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b8152600401610e90929190611bd8565b60206040518083038186803b158015610ea857600080fd5b505afa158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee09190611d63565b73ffffffffffffffffffffffffffffffffffffffff1614611a615760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b8152600401610f59929190611bd8565b60206040518083038186803b158015610f7157600080fd5b505afa158015610f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa99190611d63565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886846040518363ffffffff1660e01b8152600401611009929190611bd8565b60206040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110599190611cb6565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886856040518363ffffffff1660e01b81526004016110b9929190611bd8565b60206040518083038186803b1580156110d157600080fd5b505afa1580156110e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111099190611cb6565b905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111469190611e0d565b60206040518083038186803b15801561115e57600080fd5b505afa158015611172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111969190611d21565b905060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111d39190611e0d565b60206040518083038186803b1580156111eb57600080fd5b505afa1580156111ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112239190611d21565b90508773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba9190611d63565b73ffffffffffffffffffffffffffffffffffffffff161415611464578773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161131393929190611e28565b602060405180830381600087803b15801561132d57600080fd5b505af1158015611341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113659190611c39565b508773ffffffffffffffffffffffffffffffffffffffff1663095ea7b385886040518363ffffffff1660e01b81526004016113a1929190611ce3565b602060405180830381600087803b1580156113bb57600080fd5b505af11580156113cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f39190611c39565b508373ffffffffffffffffffffffffffffffffffffffff16634257dc4c876040518263ffffffff1660e01b815260040161142d9190611bae565b600060405180830381600087803b15801561144757600080fd5b505af115801561145b573d6000803e3d6000fd5b505050506115ee565b8773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b81526004016114a193929190611e28565b602060405180830381600087803b1580156114bb57600080fd5b505af11580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190611c39565b508773ffffffffffffffffffffffffffffffffffffffff1663095ea7b385886040518363ffffffff1660e01b815260040161152f929190611ce3565b602060405180830381600087803b15801561154957600080fd5b505af115801561155d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115819190611c39565b508373ffffffffffffffffffffffffffffffffffffffff1663dc171624876040518263ffffffff1660e01b81526004016115bb9190611bae565b600060405180830381600087803b1580156115d557600080fd5b505af11580156115e9573d6000803e3d6000fd5b505050505b6000828673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161162a9190611e0d565b60206040518083038186803b15801561164257600080fd5b505afa158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a9190611d21565b6116849190611e8e565b90508873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e357600080fd5b505afa1580156116f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171b9190611d63565b73ffffffffffffffffffffffffffffffffffffffff161415611835578573ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401611772929190611ce3565b602060405180830381600087803b15801561178c57600080fd5b505af11580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c49190611c39565b508373ffffffffffffffffffffffffffffffffffffffff16634257dc4c826040518263ffffffff1660e01b81526004016117fe9190611bae565b600060405180830381600087803b15801561181857600080fd5b505af115801561182c573d6000803e3d6000fd5b5050505061192f565b8573ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401611870929190611ce3565b602060405180830381600087803b15801561188a57600080fd5b505af115801561189e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c29190611c39565b508373ffffffffffffffffffffffffffffffffffffffff1663dc171624826040518263ffffffff1660e01b81526004016118fc9190611bae565b600060405180830381600087803b15801561191657600080fd5b505af115801561192a573d6000803e3d6000fd5b505050505b6000828973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161196b9190611e0d565b60206040518083038186803b15801561198357600080fd5b505afa158015611997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bb9190611d21565b6119c59190611e8e565b90508873ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611a02929190611ce3565b602060405180830381600087803b158015611a1c57600080fd5b505af1158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a549190611c39565b5050505050505050611a93565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60008060146101000a81548160ff021916908315150217905550505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ae382611ab8565b9050919050565b611af381611ad8565b8114611afe57600080fd5b50565b600081359050611b1081611aea565b92915050565b6000819050919050565b611b2981611b16565b8114611b3457600080fd5b50565b600081359050611b4681611b20565b92915050565b600080600060608486031215611b6557611b64611ab3565b5b6000611b7386828701611b01565b9350506020611b8486828701611b01565b9250506040611b9586828701611b37565b9150509250925092565b611ba881611b16565b82525050565b6000602082019050611bc36000830184611b9f565b92915050565b611bd281611ad8565b82525050565b6000604082019050611bed6000830185611bc9565b611bfa6020830184611bc9565b9392505050565b60008115159050919050565b611c1681611c01565b8114611c2157600080fd5b50565b600081519050611c3381611c0d565b92915050565b600060208284031215611c4f57611c4e611ab3565b5b6000611c5d84828501611c24565b91505092915050565b6000611c7182611ab8565b9050919050565b6000611c8382611c66565b9050919050565b611c9381611c78565b8114611c9e57600080fd5b50565b600081519050611cb081611c8a565b92915050565b600060208284031215611ccc57611ccb611ab3565b5b6000611cda84828501611ca1565b91505092915050565b6000604082019050611cf86000830185611bc9565b611d056020830184611b9f565b9392505050565b600081519050611d1b81611b20565b92915050565b600060208284031215611d3757611d36611ab3565b5b6000611d4584828501611d0c565b91505092915050565b600081519050611d5d81611aea565b92915050565b600060208284031215611d7957611d78611ab3565b5b6000611d8784828501611d4e565b91505092915050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000611dd7600e83611d90565b9150611de282611da1565b602082019050919050565b60006020820190508181036000830152611e0681611dca565b9050919050565b6000602082019050611e226000830184611bc9565b92915050565b6000606082019050611e3d6000830186611bc9565b611e4a6020830185611bc9565b611e576040830184611b9f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e9982611b16565b9150611ea483611b16565b925082821015611eb757611eb6611e5f565b5b82820390509291505056fea26469706673582212201bda4c67b508ce2de754394109b6aa8801572be46fb09c0fdad83dfc8d254b3964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063635bc0c21461003b578063fe9f5c051461006b575b600080fd5b61005560048036038101906100509190611b4c565b610087565b6040516100629190611bae565b60405180910390f35b61008560048036038101906100809190611b4c565b6106ce565b005b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82286866040518363ffffffff1660e01b81526004016100e5929190611bd8565b60206040518083038186803b1580156100fd57600080fd5b505afa158015610111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101359190611c39565b1561027d5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6887876040518363ffffffff1660e01b8152600401610198929190611bd8565b60206040518083038186803b1580156101b057600080fd5b505afa1580156101c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e89190611cb6565b90508073ffffffffffffffffffffffffffffffffffffffff166328da1aef87866040518363ffffffff1660e01b8152600401610225929190611ce3565b60206040518083038186803b15801561023d57600080fd5b505afa158015610251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102759190611d21565b9150506106c3565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b81526004016102f0929190611bd8565b60206040518083038186803b15801561030857600080fd5b505afa15801561031c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103409190611d63565b73ffffffffffffffffffffffffffffffffffffffff16146106905760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246087876040518363ffffffff1660e01b81526004016103b9929190611bd8565b60206040518083038186803b1580156103d157600080fd5b505afa1580156103e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104099190611d63565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888846040518363ffffffff1660e01b8152600401610469929190611bd8565b60206040518083038186803b15801561048157600080fd5b505afa158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190611cb6565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6888856040518363ffffffff1660e01b8152600401610519929190611bd8565b60206040518083038186803b15801561053157600080fd5b505afa158015610545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105699190611cb6565b905060008273ffffffffffffffffffffffffffffffffffffffff166328da1aef8a896040518363ffffffff1660e01b81526004016105a8929190611ce3565b60206040518083038186803b1580156105c057600080fd5b505afa1580156105d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f89190611d21565b90508173ffffffffffffffffffffffffffffffffffffffff166328da1aef85836040518363ffffffff1660e01b8152600401610635929190611ce3565b60206040518083038186803b15801561064d57600080fd5b505afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190611d21565b9450505050506106c2565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b809150509392505050565b600060149054906101000a900460ff161561071e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071590611ded565b60405180910390fd5b6001600060146101000a81548160ff02191690831515021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637663f82284846040518363ffffffff1660e01b8152600401610794929190611bd8565b60206040518083038186803b1580156107ac57600080fd5b505afa1580156107c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e49190611c39565b15610e1d5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6885856040518363ffffffff1660e01b8152600401610847929190611bd8565b60206040518083038186803b15801561085f57600080fd5b505afa158015610873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108979190611cb6565b905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108d49190611e0d565b60206040518083038186803b1580156108ec57600080fd5b505afa158015610900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109249190611d21565b90508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b15801561098357600080fd5b505afa158015610997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bb9190611d63565b73ffffffffffffffffffffffffffffffffffffffff161415610b65578473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610a1493929190611e28565b602060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a669190611c39565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b8152600401610aa2929190611ce3565b602060405180830381600087803b158015610abc57600080fd5b505af1158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190611c39565b508173ffffffffffffffffffffffffffffffffffffffff16634257dc4c846040518263ffffffff1660e01b8152600401610b2e9190611bae565b600060405180830381600087803b158015610b4857600080fd5b505af1158015610b5c573d6000803e3d6000fd5b50505050610cef565b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610ba293929190611e28565b602060405180830381600087803b158015610bbc57600080fd5b505af1158015610bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf49190611c39565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b383856040518363ffffffff1660e01b8152600401610c30929190611ce3565b602060405180830381600087803b158015610c4a57600080fd5b505af1158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190611c39565b508173ffffffffffffffffffffffffffffffffffffffff1663dc171624846040518263ffffffff1660e01b8152600401610cbc9190611bae565b600060405180830381600087803b158015610cd657600080fd5b505af1158015610cea573d6000803e3d6000fd5b505050505b6000818573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d2b9190611e0d565b60206040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b9190611d21565b610d859190611e8e565b90508473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610dc2929190611ce3565b602060405180830381600087803b158015610ddc57600080fd5b505af1158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e149190611c39565b50505050611a94565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b8152600401610e90929190611bd8565b60206040518083038186803b158015610ea857600080fd5b505afa158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee09190611d63565b73ffffffffffffffffffffffffffffffffffffffff1614611a615760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635553246085856040518363ffffffff1660e01b8152600401610f59929190611bd8565b60206040518083038186803b158015610f7157600080fd5b505afa158015610f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa99190611d63565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886846040518363ffffffff1660e01b8152600401611009929190611bd8565b60206040518083038186803b15801561102157600080fd5b505afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110599190611cb6565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b273a6886856040518363ffffffff1660e01b81526004016110b9929190611bd8565b60206040518083038186803b1580156110d157600080fd5b505afa1580156110e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111099190611cb6565b905060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111469190611e0d565b60206040518083038186803b15801561115e57600080fd5b505afa158015611172573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111969190611d21565b905060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111d39190611e0d565b60206040518083038186803b1580156111eb57600080fd5b505afa1580156111ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112239190611d21565b90508773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b15801561128257600080fd5b505afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba9190611d63565b73ffffffffffffffffffffffffffffffffffffffff161415611464578773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161131393929190611e28565b602060405180830381600087803b15801561132d57600080fd5b505af1158015611341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113659190611c39565b508773ffffffffffffffffffffffffffffffffffffffff1663095ea7b385886040518363ffffffff1660e01b81526004016113a1929190611ce3565b602060405180830381600087803b1580156113bb57600080fd5b505af11580156113cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f39190611c39565b508373ffffffffffffffffffffffffffffffffffffffff16634257dc4c876040518263ffffffff1660e01b815260040161142d9190611bae565b600060405180830381600087803b15801561144757600080fd5b505af115801561145b573d6000803e3d6000fd5b505050506115ee565b8773ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b81526004016114a193929190611e28565b602060405180830381600087803b1580156114bb57600080fd5b505af11580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190611c39565b508773ffffffffffffffffffffffffffffffffffffffff1663095ea7b385886040518363ffffffff1660e01b815260040161152f929190611ce3565b602060405180830381600087803b15801561154957600080fd5b505af115801561155d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115819190611c39565b508373ffffffffffffffffffffffffffffffffffffffff1663dc171624876040518263ffffffff1660e01b81526004016115bb9190611bae565b600060405180830381600087803b1580156115d557600080fd5b505af11580156115e9573d6000803e3d6000fd5b505050505b6000828673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161162a9190611e0d565b60206040518083038186803b15801561164257600080fd5b505afa158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a9190611d21565b6116849190611e8e565b90508873ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663ce5efee36040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e357600080fd5b505afa1580156116f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171b9190611d63565b73ffffffffffffffffffffffffffffffffffffffff161415611835578573ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401611772929190611ce3565b602060405180830381600087803b15801561178c57600080fd5b505af11580156117a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c49190611c39565b508373ffffffffffffffffffffffffffffffffffffffff16634257dc4c826040518263ffffffff1660e01b81526004016117fe9190611bae565b600060405180830381600087803b15801561181857600080fd5b505af115801561182c573d6000803e3d6000fd5b5050505061192f565b8573ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401611870929190611ce3565b602060405180830381600087803b15801561188a57600080fd5b505af115801561189e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c29190611c39565b508373ffffffffffffffffffffffffffffffffffffffff1663dc171624826040518263ffffffff1660e01b81526004016118fc9190611bae565b600060405180830381600087803b15801561191657600080fd5b505af115801561192a573d6000803e3d6000fd5b505050505b6000828973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161196b9190611e0d565b60206040518083038186803b15801561198357600080fd5b505afa158015611997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bb9190611d21565b6119c59190611e8e565b90508873ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611a02929190611ce3565b602060405180830381600087803b158015611a1c57600080fd5b505af1158015611a30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a549190611c39565b5050505050505050611a93565b6040517f8bb120b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b60008060146101000a81548160ff021916908315150217905550505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ae382611ab8565b9050919050565b611af381611ad8565b8114611afe57600080fd5b50565b600081359050611b1081611aea565b92915050565b6000819050919050565b611b2981611b16565b8114611b3457600080fd5b50565b600081359050611b4681611b20565b92915050565b600080600060608486031215611b6557611b64611ab3565b5b6000611b7386828701611b01565b9350506020611b8486828701611b01565b9250506040611b9586828701611b37565b9150509250925092565b611ba881611b16565b82525050565b6000602082019050611bc36000830184611b9f565b92915050565b611bd281611ad8565b82525050565b6000604082019050611bed6000830185611bc9565b611bfa6020830184611bc9565b9392505050565b60008115159050919050565b611c1681611c01565b8114611c2157600080fd5b50565b600081519050611c3381611c0d565b92915050565b600060208284031215611c4f57611c4e611ab3565b5b6000611c5d84828501611c24565b91505092915050565b6000611c7182611ab8565b9050919050565b6000611c8382611c66565b9050919050565b611c9381611c78565b8114611c9e57600080fd5b50565b600081519050611cb081611c8a565b92915050565b600060208284031215611ccc57611ccb611ab3565b5b6000611cda84828501611ca1565b91505092915050565b6000604082019050611cf86000830185611bc9565b611d056020830184611b9f565b9392505050565b600081519050611d1b81611b20565b92915050565b600060208284031215611d3757611d36611ab3565b5b6000611d4584828501611d0c565b91505092915050565b600081519050611d5d81611aea565b92915050565b600060208284031215611d7957611d78611ab3565b5b6000611d8784828501611d4e565b91505092915050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000611dd7600e83611d90565b9150611de282611da1565b602082019050919050565b60006020820190508181036000830152611e0681611dca565b9050919050565b6000602082019050611e226000830184611bc9565b92915050565b6000606082019050611e3d6000830186611bc9565b611e4a6020830185611bc9565b611e576040830184611b9f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e9982611b16565b9150611ea483611b16565b925082821015611eb757611eb6611e5f565b5b82820390509291505056fea26469706673582212201bda4c67b508ce2de754394109b6aa8801572be46fb09c0fdad83dfc8d254b3964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2597,
        "contract": "contracts/Dex/WeaveSwap.sol:SwapRouter",
        "label": "poolTracker",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PoolTracker)2575"
      },
      {
        "astId": 2611,
        "contract": "contracts/Dex/WeaveSwap.sol:SwapRouter",
        "label": "locked",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(PoolTracker)2575": {
        "encoding": "inplace",
        "label": "contract PoolTracker",
        "numberOfBytes": "20"
      }
    }
  }
}